@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@using System.Configuration;
@model MonitorModel
@{
  ViewBag.Title = "Election Monitor";
  ViewBag.Message = "What's Happening?";

  ContextItems.AddJavascriptForPage("url", "monitorPage.beforeUrl={0};".FilledWith(Url.Action("Index", "Before").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("pageUrl", "monitorPage.controllerUrl={0};".FilledWith(Url.Action("Index").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("locations", "monitorPage.initial={0};".FilledWith(Model.MonitorInfoJson));
  ContextItems.AddJavascriptForPage("guest", "monitorPage.isGuest={0};".FilledWith(UserSession.IsGuestTeller.SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("monitorPage.T24={0};".FilledWith(UserSession.CurrentElection.T24.SerializedAsJsonString()));
}

<table class="Ballots">
  <caption>Ballots needing attention</caption>
  <thead>
    <tr>
      <th>
        Ballot
      </th>
      <th>
        Status
      </th>
      <th>
        Tellers
      </th>
      <th>
        Location
      </th>
    </tr>
  </thead>
  <tbody id="ballotsBody" class="Hidden tbody">
    <tr>
      <th>
        {Code} {^Btn}
      </th>
      <td>
        {Status}
      </td>
      <td>
        {Tellers}
      </td>
      <td>
        {LocationName}
      </td>
    </tr>
  </tbody>
</table>


<table class="Main">
  <thead>
    <tr>
      <th rowspan="2">
        Location
      </th>
      <th colspan="3">
        Ballots
      </th>
      <th rowspan="2">
        Status
      </th>
      <th rowspan="2">
        @(UserSession.CurrentElection.IsSingleNameElection ? "Groups" : "Computers")
      </th>
      <th rowspan="2">
        Contact Info
      </th>
    </tr>
    <tr>
      <th>
        %
      </th>
      <th>
        Counted
      </th>
      <th>
        Entered
      </th>
    </tr>
  </thead>
  <tbody id="mainBody" class="Hidden tbody">
    <tr>
      <th>
        {^Name}
      </th>
      <td>
        {^BallotsReport}
      </td>
      <td>
        {^BallotsCollected}
      </td>
      <td>
        {^BallotsAtLocation} {^Btn}
      </td>
      <td>
        {^TallyStatus}
      </td>
      <td>
        {^ComputerList}
      </td>
      <td>
        {^ContactInfo}
      </td>
    </tr>
    <tr>
      <td>
        {ComputerCode}
      </td>
      <td>
        {BallotsAtComputer}
      </td>
      <td>
        {^TellerInfo}
      </td>
    </tr>
  </tbody>
</table>
<div class="midSection">
  <div>
    @if (UserSession.IsKnownTeller)
    {
      <div class="chkLine">
        <input type="checkbox" id="chkList" @(UserSession.CurrentElection.ListForPublic.AsBoolean() ? " checked" : "") />
        <div class="byCheckBox">
          <label for="chkList">
            Open this election to allow other tellers to participate.
            <span class="line">Teller access code is: <span class="publicInfo">@UserSession.CurrentElection.ElectionPasscode.DefaultTo("?")</span></span>
            @if (UserSession.CurrentElection.ElectionPasscode.HasNoContent())
            {
              <span class="warning">(Code must first be set on the <a href="../Setup#step2">Configure page</a>.)</span>
            }
          </label>
        </div>
      </div>
    }
    <div class="chkLine">
      <input type="checkbox" id="chkAutoRefresh" />
      <div class="byCheckBox">
        <label for="chkAutoRefresh">Auto-refresh this page every </label>
        <select id="ddlRefresh" class="input-medium">
          <option value="30">30 seconds</option>
          <option value="60">minute</option>
          <option value="120">2 minutes</option>
          <option value="300">5 minutes</option>
        </select>
        <span id="lastRefreshArea">
          Refreshed at <span id="lastRefresh"></span> <span id="age"></span>
          <span class="countdownOuter">
            <span class="countdown"></span>
          </span>
        </span>
        <button type="button" class="btn btn-small btnRefresh" id="btnRefresh" accesskey="R">
          <u>R</u>efresh Now
        </button>
      </div>
    </div>

  </div>
</div>

@if (SettingsHelper.HostSupportsOnlineElections)
{
  if (UserSession.CurrentElection.OnlineEnabled)
  {
    <div id="onlineDiv" v-cloak>
      <div class="onlineTop">
        <h2 class="onlineH2">
          Online Voting
        </h2>
        <div class="closeStatusDiv">
          <div class="closeStatus" v-bind:class="closeStatusClass" v-text="CloseTime_Display"></div>
          @if (UserSession.IsKnownTeller)
          {
            <div v-if="!isClosed" class="expected">
              Show as <yes-no v-on:click="saveClose" yes="Expected" no="Firm" v-model="election.OnlineCloseIsEstimate"></yes-no>
            </div>
          }
        </div>

        <div class="closeTime">
          <el-date-picker v-model="CloseTime"
                          type="datetime"
                          size="small"
                          :clearable="false"
                          :disabled="@((!UserSession.IsKnownTeller).ToString().ToLower())"
                          placeholder="Select date and time"
                          v-on:change="saveClose">
          </el-date-picker>
          <div class="comments">
            (closing day and time)
          </div>
        </div>

        @if (UserSession.IsKnownTeller)
        {
          <div class="votingMisc">
            <el-button size="small" v-if="isClosed" v-on:click="closeOnline(5)">Open for 5 minutes</el-button>
            <el-button size="small" v-if="!isClosed" v-on:click="closeOnline(30, true)">Schedule close in 30 minutes</el-button>
            <el-button size="small" v-if="!isClosed" v-on:click="closeOnline(5, false)">Schedule close in 5 minutes</el-button>
            <el-button size="small" v-if="!isClosed" v-on:click="closeOnline()">Close now</el-button>
          </div>
        }

      </div>

      <div class="accept">
        <div v-if="!isClosed">{{onlineToProcess}} ballot{{onlineToProcess === 1 ? '' : 's'}} ready to process after Online Voting is closed.</div>
        <div v-if="isClosed">{{onlineToProcess}} ballot{{onlineToProcess === 1 ? '' : 's'}} ready to process.</div>

        @if (UserSession.IsKnownTeller)
        {
          <el-button :type="!(onlineToProcess && OnlineWhenClose_M.isBefore()) || processingReadyBallots ? '' : 'primary'"
                     v-on:click="processReadyBallots"
                     :disabled="!(onlineToProcess && OnlineWhenClose_M.isBefore()) || processingReadyBallots">
            Process Online Ballots that are Submitted
          </el-button>
        }
      </div>

      <div class="OnlineBallotsDiv">
        <el-table size="mini"
                  :row-key="function (row) {return row.PersonId;}"
                  :row-class-name="tableRowClassName"
                  v-on:sort-change="sortChange"
                  :default-sort="defaultSort"
                  :data="onlineBallots">
          <el-table-column label="Voter" prop="C_FullName" width="170" sortable show-overflow-tooltip></el-table-column>
          <el-table-column label="Email" prop="Email" width="150" sortable show-overflow-tooltip></el-table-column>
          <el-table-column label="Phone" prop="Phone" width="130" sortable show-overflow-tooltip></el-table-column>
          <el-table-column label="Front Desk"
                           prop="VotingMethod_Display"
                           width="120"
                           class-name="votingMethod"
                           sortable></el-table-column>
          <el-table-column label="Online Ballot"
                           prop="Status"
                           width="140"
                           class-name="onlineStatus"
                           sortable></el-table-column>
          <el-table-column label="When"
                           align="right"
                           min-width="160"
                           sort-by="WhenStatus_Sort"
                           sortable>
            <template slot-scope="scope">
              <div>
                {{scope.row.WhenStatus_Display}}
                <span class="ui-icon ui-icon-info History"
                      :class="'History' + scope.row.HasHistory_Tip"
                      :title="'Full History: ' + scope.row.History_Tip"></span>
              </div>
            </template>
          </el-table-column>
        </el-table>


        @*<table class="OnlineBallots">
            <thead>
              <tr>
                <th>
                  Voter Name
                </th>
                <th>
                  Voter Email / Phone
                </th>
                <th>
                  Voting Method<br />on Front Desk
                </th>
                <th>
                  Online Ballot<br />Status
                </th>
                <th>
                  When
                </th>
              </tr>
            </thead>
            <tbody id="onlineBallotsBody" class="Hidden tbody">
              <tr>
                <td class="OnlineName">
                  {C_FullName}
                </td>
                <td class="OnlineName">
                  {^EmailPhone}
                </td>
                <td class="method_{VoteMethodClass}">
                  {VotingMethod_Display}
                </td>
                <td class="row{StatusClass}">
                  {Status}
                </td>
                <td>
                  {WhenStatus_Display}
                  <span class="ui-icon ui-icon-info History History{HasHistory_Tip}" title="Full History:{History_Tip}"></span>
                </td>
              </tr>
            </tbody>
          </table>*@
      </div>
    </div>
  }
  else
  {
    <p class="noOnlineVoting">(Online voting is not enabled for this election.)</p>
  }
}



<script type="text/x-template" id="yes-no">
  <span class="YN" v-bind:class="['YN' + yesNo, disabled ? 'disabled' : '']">
    <label>
      <input type="radio" value="Y" v-model="yesNo" :disabled="disabled">
      {{yes}}
    </label>
    <label>
      <input type="radio" value="N" v-model="yesNo" :disabled="disabled">
      {{no}}
    </label>
  </span>
</script>


@section scripts{
  @if (ConfigurationManager.AppSettings["TawkToAccount"].HasContent())
  {
    <!--Start of Tawk.to Script-->
    <script type="text/javascript">
      var Tawk_API = Tawk_API || {}, Tawk_LoadStart = new Date();
      (function() {
        var s1 = document.createElement("script"), s0 = document.getElementsByTagName("script")[0];
        s1.async = true;
        s1.src = 'https://embed.tawk.to/@ConfigurationManager.AppSettings["TawkToAccount"]';
        s1.charset = 'UTF-8';
        s1.setAttribute('crossorigin', '*');
        s0.parentNode.insertBefore(s1, s0);
      })();
    </script>
    <!--End of Tawk.to Script-->
  }
}