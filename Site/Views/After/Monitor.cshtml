@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@model MonitorModel
@{
  ViewBag.Title = "Election Monitor";
  ViewBag.Message = "What's Happening?";

  if (SettingsHelper.HostSupportsOnlineElections)
  {
    ViewData["ExtraScripts"] = new[]
    {
      ClientFile("~/Scripts/vue{0}.js", ".min"),
      ClientFile("~/Scripts/luxon.min.js"),
      ClientFile("~/Scripts/vue-datetime.js"),
    };
    ViewData["ExtraCss"] = new[]
    {
      ClientFile("~/Scripts/vue-datetime.css"),
    };
  }

  ContextItems.AddJavascriptForPage("url", "monitorPage.beforeUrl={0};".FilledWith(Url.Action("Index", "Before").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("pageUrl", "monitorPage.controllerUrl={0};".FilledWith(Url.Action("Index").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("locations", "monitorPage.initial={0};".FilledWith(Model.MonitorInfoJson));
  ContextItems.AddJavascriptForPage("guest", "monitorPage.isGuest={0};".FilledWith(UserSession.IsGuestTeller.SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("monitorPage.T24={0};".FilledWith(UserSession.CurrentElection.T24.SerializedAsJsonString()));
}
<table class="Main">
  <thead>
    <tr>
      <th rowspan="2">
        Location
      </th>
      <th colspan="3">
        Ballots
      </th>
      <th rowspan="2">
        Status
      </th>
      <th rowspan="2">
        @(UserSession.CurrentElection.IsSingleNameElection ? "Groups" : "Computers")
      </th>
      <th rowspan="2">
        Contact Info
      </th>
    </tr>
    <tr>
      <th>
        %
      </th>
      <th>
        Counted
      </th>
      <th>
        Entered
      </th>
    </tr>
  </thead>
  <tbody id="mainBody" class="Hidden tbody">
    <tr>
      <th>
        {^Name}
      </th>
      <td>
        {^BallotsReport}
      </td>
      <td>
        {^BallotsCollected}
      </td>
      <td>
        {^BallotsAtLocation} {^Btn}
      </td>
      <td>
        {^TallyStatus}
      </td>
      <td>
        {^ComputerList}
      </td>
      <td>
        {^ContactInfo}
      </td>
    </tr>
    <tr>
      <td>
        {ComputerCode}
      </td>
      <td>
        {BallotsAtComputer}
      </td>
      <td>
        {^TellerInfo}
      </td>
    </tr>
  </tbody>
</table>
<div class="midSection">
  <div>
    <div class="chkLine">
      <input type="checkbox" id="chkAutoRefresh" />
      <div class="byCheckBox">
        <label for="chkAutoRefresh">Auto-refresh this page every </label>
        <select id="ddlRefresh" class="input-medium">
          <option value="15">15 seconds</option>
          <option value="30">30 seconds</option>
          <option value="60">minute</option>
          <option value="120">2 minutes</option>
        </select>
        <span id="lastRefreshArea">
          Refreshed at <span id="lastRefresh"></span>
          <span class="countdownOuter">
            <span class="countdown"></span>
          </span>
        </span>
      </div>
    </div>
    @if (UserSession.IsKnownTeller)
    {
      <div class="chkLine">
        <input type="checkbox" id="chkList" @(UserSession.CurrentElection.ListForPublic.AsBoolean() ? " checked" : "") />
        <div class="byCheckBox">
          <label for="chkList">
            Open this election to allow other tellers to participate.
            <span class="line">Teller access code is: <span class="publicInfo">@UserSession.CurrentElection.ElectionPasscode.DefaultTo("?")</span></span>
            @if (UserSession.CurrentElection.ElectionPasscode.HasNoContent())
            {
              <span class="warning">(Code must first be set on the <a href="../Setup#step2">Configure page</a>.)</span>
            }
          </label>
        </div>
      </div>
    }
    <button type="button" class="btn" id="btnRefresh" accesskey="R">
      <u>R</u>efresh Now
    </button>
  </div>
  <table class="Ballots">
    <caption>Ballots needing attention</caption>
    <thead>
    <tr>
      <th>
        Ballot
      </th>
      <th>
        Status
      </th>
      <th>
        Tellers
      </th>
      <th>
        Location
      </th>
    </tr>
    </thead>
    <tbody id="ballotsBody" class="Hidden tbody">
    <tr>
      <th>
        {Code} {^Btn}
      </th>
      <td>
        {Status}
      </td>
      <td>
        {Tellers}
      </td>
      <td>
        {LocationName}
      </td>
    </tr>
    </tbody>
  </table>

</div>

@if (SettingsHelper.HostSupportsOnlineElections)
{
  <h2 class="onlineH2">Online Voting</h2>
  if (UserSession.CurrentElection.OnlineEnabled)
  {
    <div id="onlineDiv" v-cloak>
      <div class="votingTop">
        <div class="closeStatus" v-bind:class="closeStatusClass">
          <strong v-text="CloseTime_Display"></strong>
          <div>
            <datetime v-model="CloseTime" v-on:input="saveClose" type="datetime" :minute-step="10" :use12-hour="T24"></datetime>
          </div>
          <div>
            (click to choose any day and time)
          </div>
        </div>
        <div class="votingMisc">
          <button v-if="!isClosed" v-on:click="closeOnline(30, true)">Close in 30 minutes (expected)</button>
          <button v-if="!isClosed" v-on:click="closeOnline(5, false)">Close in 5 minutes (firm)</button>
          <button v-if="isClosed" v-on:click="closeOnline(5)">Open for 5 minutes</button>
          <button v-if="!isClosed" v-on:click="closeOnline()">Close now</button>
          <div v-if="!isClosed">
            Show as <yes-no v-on:click="saveClose" yes="Expected" no="Firm" v-model="election.OnlineCloseIsEstimate"></yes-no>
          </div>
          <p v-if="!isClosed">
            Suggestion: Set to close in 5 minutes when most of the paper ballots have been tallied.
            If using a random voting method, leave extra time for tellers to process the online ballots.
          </p>
        </div>
      </div>

      <h3>Voters Registered for Online Voting</h3>
      <p>
        <input type="button"
               class="btn"
               v-on:click="processReadyBallots"
               v-bind:disabled="!(onlineToProcess && OnlineWhenClose_M.isBefore())"
               value='Accept ballots that are "Online" and "Submitted"'>
      </p>
      <p v-if="!isClosed">{{onlineToProcess}} ballot{{onlineToProcess === 1 ? '' : 's'}} ready to accept after Online voting is closed.</p>
      <p v-if="isClosed">{{onlineToProcess}} ballot{{onlineToProcess === 1 ? '' : 's'}} ready to accept.</p>

      <table class="OnlineBallots">
        <thead>
          <tr>
            <th>
              Voter
            </th>
            <th>
              Registered<br />Voting Method
            </th>
            <th>
              Online Ballot<br />Status
            </th>
            <th>
              When
            </th>
          </tr>
        </thead>
        <tbody id="onlineBallotsBody" class="Hidden tbody">
          <tr>
            <td class="OnlineName">
              {C_FullName}
              <div>{Email}</div>
            </td>
            <td>
              {VotingMethod_Display}
            </td>
            <td>
              {Status}
            </td>
            <td>
              {WhenStatus_Display}
              <span class="ui-icon ui-icon-info" title="Full History:{History_Tip}"></span>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  }
  else
  {
    <p class="noOnlineVoting">Not enabled for this election.</p>
  }
}



<script type="text/x-template" id="yes-no">
  <span class="YN" v-bind:class="['YN' + yesNo, disabled ? 'disabled' : '']">
    <label>
      <input type="radio" value="Y" v-model="yesNo" :disabled="disabled">
      {{yes}}
    </label>
    <label>
      <input type="radio" value="N" v-model="yesNo" :disabled="disabled">
      {{no}}
    </label>
  </span>
</script>
