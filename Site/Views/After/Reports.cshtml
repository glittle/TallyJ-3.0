@using TallyJ.Code.Enumerations
@using TallyJ.Code.Resources
@using TallyJ.Code.Session
@model ResultsModel
@{
  ViewBag.Title = "Reports";
  ViewBag.Message = "Report the results";

  var currentElection = UserSession.CurrentElection;

  ContextItems.AddJavascriptForPage("pageUrl", "reportsPage.controllerUrl={0};".FilledWith(Url.Action("Index").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("reportsPage.electionTitle={0};".FilledWith(UserSession.CurrentElectionName.QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("reportsPage.T24={0};".FilledWith(currentElection.T24.SerializedAsJsonString()));

  var ballotProcessEnum = currentElection.BallotProcess;
  var showVoters = ballotProcessEnum != TallyJ.EF.BallotProcessEnum.None;
  var hasMultipleLocations = ContextItems.LocationModel.HasMultipleLocations;
  var firstHeader = false;
  var onlineEnabled = currentElection.OnlineEnabled;

  var reports = new Dictionary<string, string>
{
  { "SimpleResults|Ballot Reports", "Main Election Report"},
  { "VotesByNum", "Tellers' Report, by Votes"},
  { "VotesByName", "Tellers' Report, by Name"},
  { "Ballots", "Ballots (All for Review)"},
  { "BallotsOnline", onlineEnabled ? "Ballots (Online Only)" : null},
  { "BallotsImported", currentElection.VotingMethodsContains(VotingMethodEnum.Imported) ? "Ballots (Imported Only)" : null},
  { "BallotsTied", "Ballots (For Tied)"},
  { "SpoiledVotes", "Spoiled Votes"},
  { "BallotAlignment", "Ballot Alignment"},
  { "BallotsSame", "Duplicate Ballots"},

  { "AllCanReceive|Voter Reports", "Can Be Voted For"},
  { "ChangedPeople", "Updated People Records"},
  { "Voters", showVoters ? "Participation" : null},
  { "VotersByArea", showVoters ? "Eligible and Voted by Area" : null},
  { "VotersByLocation", hasMultipleLocations ? "Registration by Venue" : null },
  { "VotersByLocationArea", hasMultipleLocations ? "Attendance by Venue" : null },
  { "AllNonEligible", "Ineligible on file"},
  { "VoterEmails", onlineEnabled ? "Email & Phone List" : null},
  };
}
<div class="reportsPage">
  <div class="chooser">
    <div>
      @foreach (var r in reports)
      {
        if (r.Value.HasNoContent())
        {
          continue;
        }
        var keyParts = r.Key.Split('|');
        var href = keyParts[0];
        if (keyParts.Length == 2)
        {
          if (firstHeader)
          {
            @("</ul></div><div>".AsRawHtml())
          }
          @("<h2>{0}</h2><ul>".FilledWith(keyParts[1]).AsRawHtml())

          firstHeader = true;
        }
        <li><a href='#@href'>@r.Value</a></li>
      }
      @("</ul>".AsRawHtml())
    </div>
    <div class="lastCol">
      <button type="button" onclick="window.print()" class="btn btn-info btnPrint">Print (Ctrl+P)</button>
      <p class="Comment ">Some browsers, such as Chrome, can create a PDF copy of the report when printing.</p>
    </div>
  </div>
  <div class="reportPanel">
    <div id="Status">
      Please select a report...
    </div>
    <div id="report">
    </div>
  </div>
</div>
