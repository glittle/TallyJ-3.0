@model SetupModel
@using System.Configuration
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Resources
@using TallyJ.Code.Session
@{
  ViewBag.Title = "Election Setup";
  ViewBag.Message = "Who, What, When and Where!";
  ViewData["ExtraScripts"] = new[] {
    ClientFile("~/Scripts/BadiDateToday.v1.js"),
    ClientFile("~/Scripts/luxon.min.js"),
    ClientFile("~/Scripts/vue-datetime.js"),
};
  ViewData["ExtraCss"] = new[] {
    ClientFile("~/Scripts/vue-datetime.css"),
  };

  ContextItems.AddJavascriptForPage("setupIndexPage.controllerUrl={0};".FilledWith(Url.Action("Index").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("setupIndexPage.Election={0};".FilledWith(Model.CurrentElection.SerializedAsJsonString()));
  //  ContextItems.AddJavascriptForPage("setupIndexPage.OnlineElection={0};".FilledWith(Model.CurrentOnlineElection.SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("setupIndexPage.Locations={0};".FilledWith(Model.LocationsJson));
  ContextItems.AddJavascriptForPage("setupIndexPage.Tellers={0};".FilledWith(Model.TellersJson));
  ContextItems.AddJavascriptForPage("setupIndexPage.initialRules('{type}','{mode}',{rules});".FilledWith(Model.RulesForCurrentElection));
  ContextItems.AddJavascriptForPage("setupIndexPage.hasBallots={0};".FilledWith(Model.HasBallots.SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("setupIndexPage.hasOnlineBallots={0};".FilledWith(Model.HasOnlineBallots.SerializedAsJsonString()));
}
<button type="button" class="btnSave btn" accesskey="S">
  <u>S</u>ave Changes
</button>

<div id="setupBody" v-cloak>
  <div class="jumpLinks">
    Jump to:
    <a href="#step2">Step 2 - Listing</a>
    <a href="#step3">Step 3 - Features</a>
    <a href="#step4">Step 4 - Online</a>
  </div>
  <h2>
    Step 1 <span>Define the Election</span>
  </h2>
  <div class="PullInstructionsHandle btn btn-mini">Instructions & Tips</div>
  <div class="PullInstructions">
    <ol>
      <li>
        Carefully define the core settings here (in grey). These will be locked down once ballots are entered into the system.
      </li>
      <li>
        The election date is optional, but for Local Spiritual Assembly elections, this will help to confirm that the election
        is being held on the 13<sup>th</sup> day of the month of Glory (Jalál).
      </li>
    </ol>
  </div>
  <table class="Demographics">
      <tr class="electionDetail T">
          <th>
              Election Model<span class="ui-icon ui-icon-info" id="qTipModel"></span>
          </th>
          <td>
              <select id="ddlType" data-name="Model">
                  @ElectionModelEnum.ForHtmlSelect()
              </select>
              <span class="ui-icon ui-icon-info" id="qTipLocked1"></span>
              <span class="ui-state-error-text"><span class="ui-icon ui-icon-info" id="qTipLocked2"></span></span>
          </td>
      </tr>
      <tr class="electionDetail">
      <th>
        Type of Election<span class="ui-icon ui-icon-info" id="qTipType"></span>
      </th>
      <td>
        <select id="ddlType" data-name="ElectionType">
          @ElectionTypeEnum.ForHtmlSelect()
        </select>
      </td>
    </tr>
    <tr class="electionDetail">
      <th>
        Variation<span class="ui-icon ui-icon-info" id="qTipVariation"></span>
      </th>
      <td>
        <select id="ddlMode" data-name="ElectionMode">
          @ElectionModeEnum.ForHtmlSelect("", new Dictionary<string, string>
          {
            {"B", " id=modeB"}
          })
          @*                <option value="N">Normal Election</option>
            <option value="T">Tie-Break</option>
            <option value="B" id="modeB">By-election</option>
          *@
        </select>
        <span id="VariationNotice">
          Special Notes:
          <span class="ui-icon ui-icon-info" id="qTipNoteN"></span>
          <span class="ui-icon ui-icon-info" id="qTipNoteLSA2"></span>
          <span class="ui-icon ui-icon-info" id="qTipNoteT"></span>
          <span class="ui-icon ui-icon-info" id="qTipNoteB"></span>
        </span>
      </td>
    </tr>
    <tr class="electionDetail">
      <th>
        Spaces on Ballot<span class="ui-icon ui-icon-info" id="qTipNum"></span>
      </th>
      <td>
        <input type="number" min="1" id="txtNames" data-name="NumberToElect" />
      </td>
    </tr>
    @*<tr class="electionDetail">
        <th>
          Who can vote?<span class="ui-icon ui-icon-info" id="qTipCanVote"></span>
        </th>
        <td>
          <select id="ddlCanVote" data-name="CanVote">
            <option value="A">Everyone on the list</option>
            <option value="N">Named delegates</option>
          </select>
        </td>
      </tr>
      <tr class="electionDetail B">
        <th>
          Who can be voted for?<span class="ui-icon ui-icon-info" id="qTipCanReceive"></span>
        </th>
        <td>
          <select id="ddlCanReceive" data-name="CanReceive">
            <option value="A">Everyone on the list</option>
            <option value="N">Named individuals</option>
          </select>
        </td>
      </tr>*@
    <tr>
      <th>
        Report on next highest<span class="ui-icon ui-icon-info" id="qTipNumNext"></span>
      </th>
      <td>
        <input type="number" min="0" id="txtExtras" data-name="NumberExtra" />
      </td>
    </tr>
    <tr>
      <th>
        Convener<span class="ui-icon ui-icon-info" id="qTipConvener"></span>
      </th>
      <td>
        <input type="text" id="txtConvener" data-name="Convenor">
        Name of the responsible Assembly
      </td>
    </tr>
    <tr>
      <th>
        Name in TallyJ<span class="ui-icon ui-icon-info" id="qTipName"></span>
      </th>
      <td>
        <div class="nameInfo">
          <input type="text" id="txtName" data-name="Name">
          <span>Displayed for tellers and voters and on some reports. May be viewed by individuals not in your community, so it would be good to include your community name.</span>
        </div>
      </td>
    </tr>
    <tr>
      <th>
          <span v-if="election.Model==='P'">Approximate Date of Unit Elections</span>
          <span v-else>Date of Election</span>
          <span class="ui-icon ui-icon-info" id="qTipDate"></span>
      </th>
      <td>
        <input type="text" id="txtDate" data-name="DateOfElection" placeholder="yyyy-mm-dd">
        <span id="txtDateTip">(yyyy-mm-dd)</span>
        <div class="badiDate">
          <div id="badiDateIntro"></div>
          <div id="badiDateBefore" class="badiDateName"></div>
          <div id="badiDateAfter" class="badiDateName"></div>
          <div class="showGlory13">Local Spiritual Assembly elections must begin on 13 Glory (Jalál).</div>
        </div>
      </td>
    </tr>
  </table>

  <div class="newStep">
    <a id="step2"></a>
  </div>
  <h2>
    Step 2 <span>List the election for tellers</span>
  </h2>
  <div class="PullInstructionsHandle btn btn-mini">Instructions & Tips</div>
  <div class="PullInstructions">
    <ol>
      <li>Provide a name for this election that you will use and see in your list of elections.</li>
      <li>If you allow other tellers access, they will see the name and it will be listed on the public TallyJ home page while you are active in it.</li>
      <li>Typically the name should include your locality and the election type. For example, New York Ridván @(DateTime.Today.Year).</li>
    </ol>
  </div>

  <table class="Demographics">

    <tr>
      <th>
        Just Testing?<span class="ui-icon ui-icon-info" id="qTipTest"></span>
      </th>
      <td>
        <yes-no v-model="election.ShowAsTest"></yes-no>
      </td>
      <td>
        Show this as a Test election in my list of elections.
      </td>
    </tr>

    <tr>
      <th>
        Access Code<span class="ui-icon ui-icon-info" id="qTipAccess"></span>
      </th>
      <td>
        <input type="text" v-model="election.ElectionPasscode" maxlength="50" />
      </td>
      <td>
        Assistant tellers use this code to join you in the election.
        Other head or administrative tellers can log in using your account and password.
      </td>
    </tr>
    <tr>
      <th>
        Allow Tellers In?<span class="ui-icon ui-icon-info" id="qTipShow"></span>
      </th>
      <td>
        <yes-no v-model="election.ListForPublic" :disabled="!election.ElectionPasscode"></yes-no>
      </td>
      <td>
        If Yes, this election is shown on the Home Page for tellers to join in.<br>
        This is only effective if an Access Code is set. It can be changed here later or on the <a href="~/After/Monitor">Monitor Progress</a> page.
      </td>
    </tr>
  </table>


  <div class="newStep">
    <a id="step3"></a>
  </div>
  <h2>
    Step 3 <span>Configure Features</span>
  </h2>
  <div class="PullInstructionsHandle btn btn-mini">Instructions & Tips</div>
  <div class="PullInstructions">
    <ol>
      <li>
        If you will register voters or track envelopes with TallyJ, answer "Yes" to the first question then
        choose between the three processes described below.
      </li>
      <li>Registration involves validating the voter's identity and may take extra time.</li>
      <li>For large communities, process B may prove to be the fastest.</li>
    </ol>
  </div>

  <table class="Demographics">
    <tr>
      <th>
        Use "Gathering Ballots"?<span class="ui-icon ui-icon-info" id="qTipPreBallot"></span>
      </th>
      <td>
        <yes-no v-model="usingBallotProcess"></yes-no>
      </td>
      <td>
        Use TallyJ to register voters or record the collection of ballot envelopes?
      </td>
    </tr>
    <tr v-if="usingBallotProcess">
      <th>
        Use "Roll Call"?
      </th>
      <td colspan="2" class="processOptions">
        <table>
          <tr>
            <th>Yes</th>
            <td>
              <input type="radio" value="Roll" title="Roll" v-model="election.BallotProcessRaw" name="rollCall" id="process1" />
            </td>
            <td>
              <label for="process1">
                As voters arrive at the election, validate their identity at tellers' stations and mark them as <strong>In Person</strong>.
                Later, project the <strong>Roll Call</strong> and have people publicly deposit their ballots when their name is displayed.
              </label>
            </td>
          </tr>
          @*<tr>
              <th>B</th>
              <td>
                <input type="radio" value="RegV" title="RegV" v-model="election.BallotProcessRaw" name="rollCall" id="process2" />
              </td>
              <td>
                <label for="process2">
                  As voters arrive, use a Checklist item (below) to record that they have arrived. This is optional.
                  <br>
                  Later, accept ballots at tellers' stations and mark them as <strong>In Person</strong>.
                </label>
              </td>
            </tr>*@
          <tr>
            <th>No</th>
            <td>
              <input type="radio" value="RegC" title="RegC" v-model="election.BallotProcessRaw" name="rollCall" id="process3" />
            </td>
            <td>
              <label for="process3">
                When voters come to a tellers' station with their ballot, validate their identity,
                then accept their ballot and mark them as <strong>In Person</strong>.
              </label>
            </td>
          </tr>
        </table>
        <p>
          <strong>Note</strong>: For all processes, tellers can accept absentee (<strong>Dropped Off</strong> and <strong>Mailed In</strong>) ballots at any time.
        </p>
      </td>
    </tr>
    <tr v-if="usingBallotProcess">
      <th>
        How will ballots be received?
      </th>
      <td>
        <el-checkbox-group v-model="votingMethodsArray" class="votingMethods" :class="{missing: !votingMethodsArray.length}">
          <el-checkbox label="@VotingMethodEnum.InPerson.Value">@VotingMethodEnum.InPerson.DisplayText</el-checkbox>
          <el-checkbox label="@VotingMethodEnum.DroppedOff.Value">@VotingMethodEnum.DroppedOff.DisplayText</el-checkbox>
          <el-checkbox label="@VotingMethodEnum.MailedIn.Value">@VotingMethodEnum.MailedIn.DisplayText</el-checkbox>
          <el-checkbox label="@VotingMethodEnum.CalledIn.Value">@VotingMethodEnum.CalledIn.DisplayText</el-checkbox>
          <el-checkbox :disabled="true" class="partialDisable" label="@VotingMethodEnum.Online.Value">@VotingMethodEnum.Online.DisplayText *</el-checkbox>
          <el-checkbox :disabled="true" class="partialDisable" label="@VotingMethodEnum.Imported.Value">@VotingMethodEnum.Imported.DisplayText **</el-checkbox>
          <el-checkbox label="@VotingMethodEnum.Custom1.Value">
            <el-input size="small"
                      v-model="custom1"
                      :maxlength="15"
                      :disabled="!votingMethodsArray.includes('@VotingMethodEnum.Custom1.Value')"></el-input>
          </el-checkbox>
          <el-checkbox label="@VotingMethodEnum.Custom2.Value">
            <el-input size="small"
                      v-model="custom2"
                      :maxlength="15"
                      :disabled="!votingMethodsArray.includes('@VotingMethodEnum.Custom2.Value')"></el-input>
          </el-checkbox>
          <el-checkbox label="@VotingMethodEnum.Custom3.Value">
            <el-input size="small"
                      v-model="custom3"
                      :maxlength="15"
                      :disabled="!votingMethodsArray.includes('@VotingMethodEnum.Custom3.Value')"></el-input>
          </el-checkbox>
        </el-checkbox-group>
      </td>
      <td>
        <p v-if="!votingMethodsArray.length" class="warning">At least one voting method is required.</p>
        <div>Select all the methods that you are using to accept ballots from voters.</div>
        <p>There are spaces for 3 extra methods that you can define yourself.</p>
        <p>* To use TallyJ's Online Voting, select it in Step 4 (below).</p>
        <p>** @VotingMethodEnum.Imported.DisplayText is automatically checked after ballots have been imported.</p>
      </td>
    </tr>
    @*<tr v-if="usingBallotProcess">
        <th>
          Show "Called In"?<span class="ui-icon ui-icon-info" id="qTipShowCalled"></span>
        </th>
        <td>
          <yes-no v-model="election.UseCallInButton"></yes-no>
        </td>
        <td>
          Are you set up to accept ballots by telephone?
        </td>
      </tr>*@
    <tr v-if="usingBallotProcess">
      <th>
        Show Envelope Numbers?<span class="ui-icon ui-icon-info" id="qTipEnvNum"></span>
      </th>
      <td colspan="2">
        <div class="flex">
          <env-mode v-model="election.EnvNumModeRaw"></env-mode>
          <div>For whom should envelope numbers be shown on the Front Desk?</div>
        </div>
      </td>
    </tr>
    <tr class="forLocations">
      <th>
        Multiple locations?<span class="ui-icon ui-icon-info" id="qTipLocation"></span>
      </th>
      <td>
        <yes-no code="useGatheringBallots" v-model="MultipleLocations" :disabled="numLocations > 1"></yes-no>
      </td>
      <td>
        Are tellers collecting ballots in multiple locations / polling stations for this election?
      </td>
    </tr>
    <tr class="forLocations" v-show="MultipleLocations">
      <th></th>
      <td colspan="2">
        <div class="locations">
          <div id="locationList">
            <div v-for="loc in locations">
              <input :data-id="loc.C_RowId" type=text v-model="loc.Name">
              <span class="ui-icon ui-icon-arrow-2-n-s" v-if="numLocations > 1" title="Drag to sort"></span>
              <span class="ui-icon ui-icon-trash" v-if="numLocations > 1" title="Delete this location" v-on:click.passive="removeLocation($event.target)"></span>
              <span class="warning" v-if="!loc.Name">Name required</span>
            </div>
          </div>
          <button type="button" id="btnAddLocation" class="btn btn-small">
            Add a Location
          </button>
          <span>(Use short, meaningful names)</span>
        </div>
      </td>
    </tr>
    <tr>
      <th>
        Time display format
      </th>
      <td>
        <yes-no v-model="election.T24" yes="19:30" no="7:30 pm"></yes-no>
      </td>
      <td></td>
    </tr>
    <tr v-if="usingBallotProcess">
      <th>
        Checklist Items
      </th>
      <td>
        <div class="flags">
          <div v-for="(f,i) in flags" :key="i">
            <el-input size="small"
                      v-model="flags[i]"
                      :maxlength="25"></el-input>
            <i class="el-icon-delete" v-on:click="removeFlag(i)"></i>
          </div>

          <el-button size="mini" class="add" v-on:click="addFlag">Add Another</el-button>
        </div>
      </td>
      <td>
        <p>You can add items here that will be shown on the Front Desk and can be turned on or off for each person. Only single words can be used. Sample uses: </p>
        <ul>
          <li>Attending - <em>Are they at the election? (regardless of voting method)</em></li>
          <li>Lunch - <em>Have they purchased a lunch ticket?</em></li>
        </ul>
      </td>
    </tr>
    <tr>
      <th>
        Email From Name
      </th>
      <td>
        <input type="text" v-model="election.EmailFromName" v-on:change="saveNeeded">
      </td>
      <td>
        This will be name with the From address. Use your name, another person's name, or the name of an agency that will
        be recognized by voters so that the email is not rejected as spam!
      </td>
    </tr>
    <tr>
      <th>
        Email From Address
      </th>
      <td>
        <input type="email" v-model="election.EmailFromAddress" v-on:change="saveNeeded">
      </td>
      <td>
        When emails are sent to voters regarding this election, this will be the From address. The address will be visible to all voters receiving emails.
      </td>
    </tr>

  </table>


  <div class="newStep">
    <a id="step4"></a>
  </div>
  <h2>
    Step 4 <span>Online Voting</span>
  </h2>

  @if (SettingsHelper.HostSupportsOnlineElections)
  {
    <div class="PullInstructionsHandle btn btn-mini">Instructions & Tips</div>
    <div class="PullInstructions">
      <ol>
        <li>This election can be made available so that voters can cast their ballots online.</li>
        <li>To vote online, the email address a voter uses to log in to TallyJ must match the email address in their record in this election.</li>
      </ol>
    </div>

    <table class="Demographics">
      <tbody>
        <tr class="lockAfterBallots">
          <th>
            Enable Online Voting?
          </th>
          <td>
            <yes-no v-model="useOnline"></yes-no>
          </td>
          <td>
            Allow voters to cast their ballots online.
          </td>
        </tr>
        <tr class="explainLock">
          <td colspan="3">
            <span class="explain">
              Ballots have been processed so you cannot disable Online Voting.
              You can change the Closing time to prevent receiving more ballots.
              <span v-if="election.OnlineSelectionProcess !== 'B'">
                Name Selection can be changed to "Both" if desired.
              </span>
            </span>
          </td>
        </tr>
      </tbody>
      <tbody v-if="useOnline">
        <tr>
          <th>
            Name Selection
          </th>
          <td colspan="2" class="processOptions">
            <table>
              <tr>
                <th>A</th>
                <td>
                  <input type="radio" value="L" title="List" v-model="election.OnlineSelectionProcess" name="OnlineSelectionProcess" id="ol1" />
                </td>
                <td>
                  <label for="ol1">
                    <strong>List</strong> - Voters select from the people listed in this election.
                    <span class="explain">
                      Recommended when the list of people who can be voted for
                      is comprehensive (sure to contain everyone) or
                      is limited (e.g. a tie-break). Voters cannot add any new names and
                      tellers do not need to manually process each ballot.
                    </span>
                  </label>
                </td>
              </tr>
              <tr>
                <th>B</th>
                <td>
                  <input type="radio" value="R" title="Random" v-model="election.OnlineSelectionProcess" name="OnlineSelectionProcess" id="ol2" />
                </td>
                <td>
                  <label for="ol2">
                    <strong>Random</strong> -
                    Voters do not have a list to choose from but randomly type the names of the people they are voting for.
                    <span class="explain">
                      Recommended when you do not have a list or have a reason to not let voters use it.
                      <strong>Tellers</strong> will need to finish each ballot by referring to the names entered
                      by the voter, as they do for paper ballots.
                      For each vote in a ballot, tellers find and enter the matching person.
                      There is a high likelihood of spoiled votes if the names provided are not valid.
                    </span>
                  </label>
                </td>
              </tr>
              <tr>
                <th>C</th>
                <td>
                  <input type="radio" value="B" title="Both" v-model="election.OnlineSelectionProcess" name="OnlineSelectionProcess" id="ol3" />
                </td>
                <td>
                  <label for="ol3">
                    <strong>Both</strong> - Voters are given a list of known people but have the option of adding any other name.
                    <span class="explain">
                      Recommended when you have a list, but are not confident that it includes everyone.
                      If a voter adds a "random" name, tellers will need to find and enter the matching person onto the ballot.
                    </span>
                  </label>
                </td>
              </tr>
            </table>
          </td>
        </tr>

        <tr v-if="election.OnlineSelectionProcess === 'B' || election.OnlineSelectionProcess === 'L'">
          <th>
            Scrambled List?
          </th>
          <td>
            <yes-no v-model="election.RandomizeVotersList"></yes-no>
          </td>
          <td>
            When voters see the list, should it be scrambled so that it is not in alphabetical order? Each voter will get a uniquely sorted list.
          </td>
        </tr>
        <tr>
          <th>
            Open Voting at
          </th>
          <td v-bind:class="{needOnlineDates: !election.OnlineWhenOpen}">
            <datetime input-id="whenOpen" v-model="election.OnlineWhenOpen"
                      placeholder="Opening Time"
                      v-on:change="saveNeeded" type="datetime" :minute-step="10" :use12-hour="election.T24"></datetime>
            <div class="voteWhenOpen">{{showFrom(election.OnlineWhenOpen)}}</div>
          </td>
          <td>
            When should voters be able to access this election and start working on their online ballot?
            <a class="setTime btn btn-mini" v-on:click.passive="election.OnlineWhenOpen = new Date().toISOString()">Set to now.</a>
          </td>
        </tr>
        <tr>
          <th>
            Close Voting at
          </th>
          <td v-bind:class="{needOnlineDates: !election.OnlineWhenClose}">
            <datetime input-id="whenClose" v-model="election.OnlineWhenClose"
                      placeholder="Closing Time"
                      v-on:input="saveNeeded" type="datetime" :minute-step="10" :use12-hour="election.T24"></datetime>
            <div class="voteWhenClosed" v-if="election.OnlineWhenClose" v-bind:class="{closed: closeIsPast }">{{showFrom(election.OnlineWhenClose)}}</div>
          </td>
          <td>
            When should the election be closed? Use your best guess when setting up the election.
            The Head Teller will adjust the Close time during the election using the <a href="@Url.Action("Monitor", "After")">Monitor Progress</a> page.
          </td>
        </tr>
        <tr v-if="useOnline && !onlineDatesOkay">
          <td colspan="3">
            <div class="onlineWarning1">Open and Close times are both required and Open must come before Close.</div>
          </td>
        </tr>


      </tbody>
    </table>

  }
  else
  {
    <div class="PullInstructionsHandle btn btn-mini">Instructions & Tips</div>
    <div class="PullInstructions">
      <ol>
        <li>
          Online elections are not enabled on this web server.  To allow voters to cast their own ballots, use the <a href="https://tallyj.com">online version of TallyJ</a>. For a local private installation, contact Glen Little for more details
          and setup assistance.
        </li>
      </ol>
    </div>

  }

  <div class="newStep"></div>
  <h2>Other Information</h2>
  <table class="Demographics">
    <tr>
      <th>
        Teller Names<span class="ui-icon ui-icon-info" id="qTipTellers"></span>
      </th>
      <td>
        <div id="tellersList">
          <i>(Filled in by tellers as needed)</i>
        </div>
      </td>
    </tr>
  </table>

  <div class="More">
    <p class="techInfo" title="Technical information">
      Election Id: <span data-name="ElectionGuid"></span>
    </p>
  </div>
</div>


<script type="text/x-template" id="yes-no">
  <span class="YN" v-bind:class="['YN' + yesNo, disabled ? 'disabled' : '']">
    <label>
      <input type="radio" value="Y" v-model="yesNo" :disabled="disabled">
      {{yes}}
    </label>
    <label>
      <input type="radio" value="N" v-model="yesNo" :disabled="disabled">
      {{no}}
    </label>
  </span>
</script>

<script type="text/x-template" id="env-mode">
  <span class="EnvMode" v-bind:class="'EnvMode' + mode">
    <label>
      <input type="radio" value="Absentee" v-model="mode">
      All but "In Person"
    </label>
    <label>
      <input type="radio" value="All" v-model="mode">
      All
    </label>
    <label>
      <input type="radio" value="None" v-model="mode">
      None
    </label>
  </span>
</script>

<script type="text/x-template" id="locationTemplate">
</script>

@section scripts{
  @if (ConfigurationManager.AppSettings["TawkToAccount"].HasContent())
  {
    <!--Start of Tawk.to Script-->
    <script type="text/javascript">
      var Tawk_API = Tawk_API || {}, Tawk_LoadStart = new Date();
      (function() {
        var s1 = document.createElement("script"), s0 = document.getElementsByTagName("script")[0];
        s1.async = true;
        s1.src = 'https://embed.tawk.to/@ConfigurationManager.AppSettings["TawkToAccount"]';
        s1.charset = 'UTF-8';
        s1.setAttribute('crossorigin', '*');
        s0.parentNode.insertBefore(s1, s0);
      })();
    </script>
    <!--End of Tawk.to Script-->
  }
}