@model ImportBallotsModel
@using System.Configuration
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@using TallyJ.CoreModels.Helper
@{
  ContextItems.AddJavascriptForPage("importHubUrl", "importBallotsPage.ballotImportHubUrl={0};".FilledWith(@Url.Action("JoinBallotImportHub", "Setup").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("controllerUrl", "importBallotsPage.controllerUrl={0};".FilledWith(@Url.Action("Index", "Setup").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("previous", "importBallotsPage.previousFiles={0};".FilledWith(Model.PreviousUploads().SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("importBallotsPage.T24={0};".FilledWith(UserSession.CurrentElection.T24.SerializedAsJsonString()));
  ViewBag.Title = "Import Ballots from External Source";
}
<script src="@Url.Content("~/Scripts/fileuploader.js")" type="text/javascript"></script>
<div id="main">
  <div class="PullInstructionsHandle btn btn-mini">Instructions & Tips</div>
  <div class="PullInstructions">
    <ol>
      <li>
        This page is designed to import ballots from an external system.  TallyJ is customized to support each external system.
      </li>
      <li>
        As of April 2021, the only known and supported system is the Election system in the Canadian Bahá'í Community's Membership Portal.
      </li>
    </ol>
  </div>
  <h2>
    Step 1 <span>Choose the Source System</span>
  </h2>
  <div>
    <span>Source</span>
    <el-select v-model="sourceSystem" size="small" class="selectSource">
      <el-option value="Cdn" label="Canadian Bahá'í Community Membership Portal"></el-option>
      <el-option value="">Other</el-option>
    </el-select>
  </div>
  <div class="PullInstructionsHandle btn btn-mini sourceTips">Instructions</div>
  <div class="PullInstructions sourceTips">
    <div v-if="sourceSystem==='Cdn'">
      <p>
        TallyJ can be used to tally the votes received in the National Portal.  At the same time, you can receive and tally votes from others sources, such as ballots
        received by mail. You will need to follow these steps:
      </p>
      <ol>
        <li>
          When setting up your <strong>TallyJ election</strong>, you should visit the National Portal, go to "Elections", click "View List of Eligible Voters", then click
          "Download". This downloads a CSV file to your computer. You can then use the "<a href="ImportCsv">Import Name List</a>" page in TallyJ to import that list of names.
        </li>
        <li>
          <p>
            When the Portal's online election is "Finalized", view the Election Details page of the election and click the "Download XML" button:

            <img class="cdnPortal1" src="~/Images/CdnPortal1.png">

            If you do not see that button, send an email to <a href="mailto:ict@bahai.ca">ict@bahai.ca</a> to request that it be enabled for your community!
          </p>
          <p>
            Upload that file on this page, and follow the rest of the steps below.
          </p>
        </li>
      </ol>
    </div>
    <div v-if="sourceSystem===''">
      <p>
        The import system for each source must be pre-built into TallyJ.  Please contact Glen Little if you have another source that should be considered!
      </p>
    </div>

  </div>

  <div v-show="sourceSystem">
    <h2>
      Step 2 <span>Upload the ballots file</span>
    </h2>
    <p>
      Click the button below to choose and upload the ballots file, or drag the file from Windows
      Explorer to this window.
    </p>
    <div id="file-uploader">
    </div>
    <div class="uploadList">
      <h4>
        Files uploaded and on the Server
      </h4>
      <table>
        <thead>
          <tr>
            <th>
              Action
            </th>
            <th>
              Status
            </th>
            <th>
              Name
            </th>
            <th>
              Encoding
            </th>
            <th>
              Upload Time
            </th>
            <th>
              Size
            </th>
            <th>
              Other Actions
            </th>
          </tr>
        </thead>
        <tbody id="uploadListBody">
          <tr data-rowid="{C_RowId}" class="{ProcessingStatus} {RowClass}">
            <td class="Actions">
              <div class="MakeActive btn btn-mini">Select</div>
              <span>(selected)</span>
            </td>
            <td>
              {ProcessingStatusAndSteps}
            </td>
            <td>
              {OriginalFileName}
            </td>
            <td>
              {CodePageName}
            </td>
            @*<td>
                <select data-value="{CodePage}" class="codePage">
                  @ImportHelper.Encodings.Select(kvp => "<option value='{0}'>{1}</option>".FilledWith(kvp.Key, kvp.Value)).JoinedAsString().AsRawHtml()
                </select>
              </td>*@
            <td>
              {UploadTimeExt}
            </td>
            <td>
              {FileSize}
            </td>
            <td>
              <button type="button" class="download" title="Download a copy of this file">
                <span class="ui-icon ui-icon-arrowreturn-1-s"></span>
              </button>
              <button type="button" class="deleteFile" title="Permanently delete this from the server">
                <span class="ui-icon ui-icon-trash"></span>
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <h2>
      Step 3 <span>Preview the Contents</span>
      <el-button size="small"
                 v-if="activeFileRowId"
                 v-on:click.passive="getPreviewInfo">Refresh</el-button>
    </h2>

    <div class="preview" v-if="activeFileRowId && previewInfo.voters">
      <div v-if="previewInfo.voters && previewInfo.voters.length">
        <h4>File Contents</h4>
        <p>
          Election locality: {{previewInfo.locality}}
        </p>
        <p v-if="previewInfo.localunit">
          Local Unit: {{previewInfo.localunit}}
        </p>
        <p>
          Number of Ballots included: {{previewInfo.numBallots}}
        </p>
      </div>

      <div v-if="previewInfo.voters && previewInfo.voters.length">
        <h4>People who voted</h4>
        <table class="voted">
          <thead>
            <tr>
              <th>Person</th>
              <th>Voting Method on Front Desk</th>
            </tr>
          </thead>
          <tr v-for="s in previewInfo.voters" :key="s.bahaiid">
            <td>{{s.lastname}}, {{s.firstname}}</td>
            <td>
              <span :class="previewInfo.AlreadyLoaded ? '' : 'alreadyVoted'" v-if="s.VotingMethod">
                {{s.VotingMethod}}
              </span>
              <span v-else>-</span>
            </td>
          </tr>
        </table>
      </div>

      <div v-if="previewInfo.ImportErrors && previewInfo.ImportErrors.length">

        <h4 v-if="previewInfo.AlreadyLoaded">It looks like this file has been loaded!</h4>
        <div v-else>
          <h4>Issues Found</h4>
          <ol>
            <li v-for="s in previewInfo.ImportErrors" :key="s">{{s}}</li>
          </ol>

          <p v-if="previewInfo.HasUnregistered">
            Anyone not registered in TallyJ needs to be registered, then you can try this import again.
            You can add people on the <a href="People">Edit People's Names</a> page or import a complete list of
            people on the <a href="ImportCsv">Import Name List</a> page.
          </p>

          <h4 v-else class="errorText">
            This file cannot be imported until these issues are resolved.
          </h4>
        </div>
      </div>

      <div v-if="previewInfo.ImportErrors && !previewInfo.ImportErrors.length">
        <h4>Ready to Import</h4>
        <p>
          This file is ready to import!
        </p>
      </div>
    </div>


    <h2>
      Step 4 <span>Import the Voters and Ballots</span>
    </h2>
    <div v-if="activeFileRowId">
      <p>
        When you click "Import Now" the ballots will be loaded into TallyJ and the people listed above will be marked on the Front Desk as having voted in the external system.
      </p>
      <div class="importDiv">
        <el-button type="primary" v-on:click.passive="importNow" :disabled="!!(previewInfo.ImportErrors && previewInfo.ImportErrors.length) || importing">
          Import now
        </el-button>
        <div id="loadingLog">
          <div id="log"></div>
          <div id="tempLog"></div>
        </div>
      </div>
    </div>

    <div class="remove">
      <p>If you have previously imported ballots into this election and want to remove them...</p>
      <p v-if="enableRemove" class="error">
        Caution: this will remove the ballots even if tellers have made changes to them!
      </p>
      <el-button type="warning" size="small" v-on:click.passive="removeImportedInfo" :disabled="!enableRemove || removing">Remove Imported Ballots</el-button>
      <p><el-checkbox v-model="enableRemove">Enable the 'Remove Imported Ballots' button</el-checkbox></p>
    </div>
  </div>
</div>


@section scripts{
  @if (ConfigurationManager.AppSettings["TawkToAccount"].HasContent())
  {
    <!--Start of Tawk.to Script-->
    <script type="text/javascript">
      var Tawk_API = Tawk_API || {}, Tawk_LoadStart = new Date();
      (function() {
        var s1 = document.createElement("script"), s0 = document.getElementsByTagName("script")[0];
        s1.async = true;
        s1.src = 'https://embed.tawk.to/@ConfigurationManager.AppSettings["TawkToAccount"]';
        s1.charset = 'UTF-8';
        s1.setAttribute('crossorigin', '*');
        s0.parentNode.insertBefore(s1, s0);
      })();
    </script>
    <!--End of Tawk.to Script-->
  }
}