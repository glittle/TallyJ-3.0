@model SetupModel
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Resources
@using TallyJ.Code.Session
@using TallyJ.EF
@{
  ViewBag.Title = "Send Notifications";
  ViewBag.Message = "Tell Voters about the Election";
  ViewData["ExtraScripts"] = new[] {
    ClientFile("~/Scripts/vue{0}.js", ".min"),
    ClientFile("~/Scripts/ckeditor.js"),
    ClientFile("~/Scripts/ckeditor.vue.js"),
    ClientFile("~/Scripts/element-ui.js"),
    ClientFile("~/Scripts/element-ui-en.js"),
  };
  ViewData["ExtraCss"] = new[]
  {
    ClientFile("~/Scripts/element-ui.css"),
  };

  var election = UserSession.CurrentElection;
  var currentElection = new
  {
    election.ElectionGuid,
    election.EmailSubject,
    election.EmailText,
    election.SmsText,
    election.EmailFromAddressWithDefault,
    election.EmailFromNameWithDefault,
  };

  ContextItems.AddJavascriptForPage("notifyPage.voteMethods={0};".FilledWith(VotingMethodEnum.AsJsonObject()));
  ContextItems.AddJavascriptForPage("notifyPage.controllerUrl={0};".FilledWith(Url.Action("Index").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("notifyPage.Election={0};".FilledWith(currentElection.SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("notifyPage.defaultFromAddress={0};".FilledWith(currentElection.EmailFromAddressWithDefault.QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("notifyPage.hostUrlSize={0};".FilledWith(SettingsHelper.Get("HostSite", "").Length));
}

<div id="notifyBody" v-cloak class="@(SettingsHelper.HostSupportsOnlineSmsLogin ? "Sms" : "")">
  <p>
    TallyJ enables you to send an email <span class="forSmsInline">and/or SMS message</span> to all potential voters with registered email addresses<span class="forSmsInline"> or mobile phone numbers</span>.
  </p>

  <p>
    Here are some replaceable templates that can be used in the text:
    <span class="template">{PersonName}</span> <span class="templateComment">(their full name)</span>,
    <span class="template">{FirstName}</span> <span class="templateComment">(just their first name)</span>,
    <span class="template">{VoterContact}</span> <span class="templateComment">(their email or phone number, as appropriate)</span>,
    <span class="template">{hostSite}</span> <span class="templateComment">(a link to TallyJ)</span>.
  </p>
  <p>
    Emails will have a return address of "{{emailFromName}}" &lt;{{emailFromAddress}}>
    <span>(as set on the "Configure this Election" page).</span>
    <span class="forSmsInline">SMS messages will be sent from TallyJ's SMS account.</span>
  </p>
  <p v-if="@((election.ElectionType == ElectionTypeEnum.Lsa && election.ElectionMode == ElectionModeEnum.Normal).QuotedForJavascript())">
    Remember! For a Local Spiritual Assembly, the election must be held on the first day of Riḍván (the 13th day of Jalál / Glory),
    so the online portion of the election would need to closed sometime on or before that date.
  </p>

  <p>To start with sample messages, click: <button class="btn btn-mini" v-on:click="loadSamples">Get Sample Messages</button></p>

  <div class="emailBySms">
    <h2 class="ehead">Email</h2>

    <div class="emailHost">
      <p>
        Email Subject Line:
        <el-input v-model="emailSubject"
                  size="small"
                  :maxlength="150"
                  class="subject"
                  v-on:input="emailChanged = true"></el-input>
        <div v-if="!emailSubject" class="warning">Subject is required</div>
      </p>
      <div class="ckHost">
        <ckeditor :editor="editor" :config="emailEditorConfig" v-model="emailText" v-on:input="emailChanged = true"></ckeditor>
      </div>

      <el-button size="small" :type="emailChanged ? 'primary' : ''" v-on:click="saveEmail">
        Save Email Changes
      </el-button>



    </div>

    <h2 class="shead">SMS</h2>

    <div class="smsHost">
      <p>SMS should be as short as possible and not use special characters.</p>
      <div class="ckHost">
        <ckeditor :editor="editor" :config="smsEditorConfig" v-model="smsText" v-on:input="checkSms"></ckeditor>
      </div>
      <p v-if="smsText">
        About {{smsText.length}} characters after template expansion.<br />
        About {{ smsSegments === 1 ? '1 segment' : (smsSegments + ' segments') }} per SMS.
      </p>
      <p v-if="smsText.length > 500" class="warning">The SMS message may be too long to send. (Max is 500.)</p>

      <el-button size="small" :type="smsChanged ? 'primary' : ''" v-on:click="saveSms">
        Save SMS Changes
      </el-button>


    </div>

    <div class="messageBtns email">
      @*<button class="btn btn-primary" v-on:click="sendEmail('Test')" :disabled="isSaveNeeded || !emailFromAddress || !emailSubject">Send me a copy by email</button>*@
      <p><em>You should select yourself and send the email to yourself to see what it looks like.</em></p>

      <div class="bottom">
        <el-button size="small"
                   @*:class="[pendingEmail ? 'pending' : '', pendingEmail ? 'btn-warning' : 'btn-primary']"*@
                   :type="enableEmailSend ? 'primary' : ''"
                   v-on:click="sendEmail(true)"
                   :disabled="!enableEmailSend">
          Send the email to {{numWithEmails}} voter{{plural(numWithEmails)}}{{ pendingEmail ? '':'...'}}
        </el-button>
        <div class="pending" v-if="pendingEmail">Are you sure? Click again to send now.</div>
      </div>
      <p>
        <span class="comments" v-if="!emailFromAddress">(Must enter a "From Email Address" on the "Configure this Election" page.)</span>
      </p>
      <p class="isSaveNeeded" v-if="emailChanged">Save changes before sending the Email.</p>

    </div>

    <div class="messageBtns sms">
      @*<button class="btn btn-primary" v-on:click="sendSms('Test', false, testSmsNumber)" :disabled="isSaveNeeded || !testSmsNumber">Send me a copy by SMS</button>
        <div class="samplePhone">
          Send to <input type="tel" class="text50" v-on:change="fixPhone" v-on:paste="fixPhone" v-model="testSmsNumber" maxlength="25" pattern="\+[0-9]{4,15}" />
          <span class="comments">(will not include your first name)</span>
          <div class="comments">Sample: @SettingsHelper.Get("twilio-FromNumber", "?")</div>
        </div>*@
      <p><em>You should select yourself and send the SMS to yourself to see what it looks like.</em></p>

      <div class="bottom">
        <el-button size="small"
                   :type="enableSmsSend  ? 'primary' : ''"
                   @* :class="[pendingSms ? 'pending' : '', pendingSms ? 'btn-warning' : 'btn-primary']" *@
                    v-on:click="sendSms(true)" 
                   :disabled="!enableSmsSend">
          Send the SMS message to {{numWithPhones}} voter{{plural(numWithPhones)}}{{ pendingSms ? '':'...'}}
        </el-button>
        <div class="pending" v-if="pendingSms">Are you sure? Click again to send now.</div>
      </div>
      <p class="isSaveNeeded" v-if="smsChanged">Save changes before sending the SMS message.</p>
      <p class="estSmsCost" v-if="smsCost">Estimated cost to send {{numWithPhones}} SMS message{{plural(numWithPhones)}}: USD ${{smsCost}}</p>
      <p class="estSmsCostComment" v-if="smsCost">
        This is free for you to use as costs are covered by donations. If you send a significant number, please consider donating... but don't
        let cost be a barrier to using this tool in your community!
      </p>
    </div>

    <div class="listingSelection">
      <button class="btn btn-mini" v-on:click="selectAll" title="All people in the election">All</button>
      <button class="btn btn-mini" v-on:click="select('none')" title="Clear checkboxes">None</button>
      <button class="btn btn-mini" v-on:click="select('notVoted')" title="Not voted">Not Voted</button>
      <button class="btn btn-mini" v-on:click="select('votedOnline')" title="Has finished voting online">Voted Online</button>
      <button class="btn btn-mini" v-on:click="select('onlineUnfinished')" title="Has created an online ballot but not yet submitted it">Unfinished Online Ballot</button>
      <button class="btn btn-mini" v-on:click="select('emailOnly')" title="Only Email on file">Only has Email</button>
      <button class="btn btn-mini" v-on:click="select('smsOnly')" title="Only SMS on file">Only has SMS</button>
      <button class="btn btn-mini" v-on:click="refresh">Reload List</button>
    </div>

    <div class="emailListing">
      <el-table stripe
                size="mini"
                max-height="250"
                ref="wholeList"
                :row-key="function (row) {return row.C_RowId;}"
                v-on:selection-change="selectionChanged($event)"
                :data="allPeople">
        <el-table-column type="selection" reserve-selection></el-table-column>
        <el-table-column label="Voter" prop="C_FullName" show-overflow-tooltip></el-table-column>
        <el-table-column label="Email" prop="Email" show-overflow-tooltip></el-table-column>
        <el-table-column label="Phone" prop="Phone" show-overflow-tooltip></el-table-column>
        <el-table-column label="Voted" prop="VotingMethod_Display"></el-table-column>
        <el-table-column label="Online Status" prop="OnlineStatus"></el-table-column>
      </el-table>
      @*<el-table stripe
                    size="mini"
                    max-height="250"
                    ref="emailList"
                    :row-key="function (row) {return row.C_RowId;}"
                    v-on:selection-change="selectionChanged('email', $event)"
                    :data="peopleWithEmail">
            <el-table-column type="selection" reserve-selection></el-table-column>
            <el-table-column label="Voter" prop="C_FullName" show-overflow-tooltip></el-table-column>
            <el-table-column label="Email" prop="Email" show-overflow-tooltip></el-table-column>
            <el-table-column label="Voted?" prop="VotingMethod_Display"></el-table-column>
          </el-table>
        </div>
        <div class="smsListing">
          <el-table stripe
                    size="mini"
                    max-height="250"
                    ref="smsList"
                    :row-key="function (row) {return row.C_RowId;}"
                    v-on:selection-change="selectionChanged('phone', $event)"
                    :data="peopleWithPhone">
            <el-table-column type="selection" reserve-selection></el-table-column>
            <el-table-column label="Voter" prop="C_FullName" show-overflow-tooltip></el-table-column>
            <el-table-column label="Phone" prop="Phone" show-overflow-tooltip></el-table-column>
            <el-table-column label="Voted?" prop="VotingMethod_Display"></el-table-column>
          </el-table>
        </div>*@
    </div>
  </div>


  <div class="sideBySide">
    <h3>Recent Message Log</h3>
    <span>
      <button class="btn btn-mini" v-on:click="downloadCompleteLog">Download Complete Log</button>
      <button class="btn btn-mini" v-on:click="getContactLog(0)">Refresh Log</button>
    </span>
  </div>
  <div class="emailHistoryHost" :class="{loadingLog:loadingLog}">
    <table>
      <thead>
        <tr>
          <th colspan="3">Person / Action</th>
          <th>When</th>
          <th>Time</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="e in contactLog" :key="e.C_RowId" :class="{withPhone: e.Phone}">
          <td v-text="e.Name" v-if="e.Phone"></td>
          <td v-text="e.Phone" v-if="e.Phone"></td>
          <td v-text="e.Details" :colspan="e.Phone ? 1 : 3"></td>
          <td class="nowrap" v-text="e.age"></td>
          <td class="nowrap" v-text="e.when"></td>
        </tr>
      </tbody>
    </table>
    <button class="btn btn-mini" v-on:click="getMoreLog">Get More</button>
  </div>


  <div class="More">
    <p class="techInfo" title="Technical information">
      Election Id: <span v-text="ElectionGuid"></span>
    </p>
  </div>
</div>
