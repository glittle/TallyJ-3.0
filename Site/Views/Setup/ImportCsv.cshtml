@model ImportCsvModel
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@using TallyJ.CoreModels.Helper
@{
  ContextItems.AddJavascriptForPage("importHubUrl", "importCsvPage.importHubUrl={0};".FilledWith(@Url.Action("JoinImportHub", "Elections").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("controllerUrl", "importCsvPage.controllerUrl={0};".FilledWith(@Url.Action("Index", "Setup").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("previous", "importCsvPage.previousFiles={0};".FilledWith(Model.PreviousUploads().SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("statusNames", "importCsvPage.statusNames={0};".FilledWith(IneligibleReasonEnum.ReasonNamesForImportPage().SerializedAsJsonString()));
    ContextItems.AddJavascriptForPage("importCsvPage.T24={0};".FilledWith(UserSession.CurrentElection.T24.SerializedAsJsonString()));
  ViewBag.Title = "Import Names";
}
<script src="@Url.Content("~/Scripts/fileuploader.js")" type="text/javascript"></script>
<div class="PullInstructionsHandle btn btn-mini">Instructions & Tips</div>
<div class="PullInstructions">
  <ol>
    <li>
      To load people, you will need to prepare a comma-separated value (CSV) file with all the people's names in it.<ul>
        <li>You can use Excel to do this or export a CSV file from your membership records system.</li>
        <li>The first line of the file must be a "headers row" with the title for each column. The header titles should not include any accents in words, such Bah&aacute;'&iacute;.</li>
        <li>The file should be saved as a normal Windows text/CSV file or using UTF-8 or UTF-16 encoding.</li>
      </ul>
    </li>
    <li>
      This file usually contains only the list of eligible adults. However, if it includes children
      and youth, or people no longer in the community or not eligible to vote, you should
      first adjust the CSV file and include an "Eligibility Status" column (see below for exact details).
    </li>
    <li>
      In TallyJ, each person must have a First and Last name. The CSV file may also have other optional
      fields, such as Bahá'í ID, area, maiden name, nickname, etc. The columns in the file will be displayed below.
      For each of the columns, select which TallyJ field it should be mapped to, if any.
    </li>
    <li>
      If you find that accented characters are not being processed correctly, you may
      need to change the Content Encoding and try Importing again.
    </li>
  </ol>
</div>
<h2>
  Step 1 <span>Upload the CSV file</span>
</h2>
<p>
  Click the button below to choose and upload a file, or drag the file from Windows
  Explorer to this window.
</p>
<div id="file-uploader">
</div>
<div class="uploadList">
  <h4>
    Files on the Server
  </h4>
  <table>
    <thead>
      <tr>
        <th>
          Action
        </th>
        <th>
          Status
        </th>
        <th>
          Name
        </th>
        <th>
          Content Encoding
        </th>
        <th>
          Headers<br />on Line
        </th>
        <th>
          Upload Time
        </th>
        <th>
          Size
        </th>
        <th>
          Other Actions
        </th>
      </tr>
    </thead>
    <tbody id="uploadListBody">
      <tr data-rowid="{C_RowId}" class="{ProcessingStatus} {RowClass}">
        <td class="Actions">
          <div class="MakeActive btn btn-mini" title="Select this file for mapping columns and importing people">Select</div>
          <div class="CopyMap btn btn-mini" title="Copy the column mapping information from this file to the selected one">Copy Mapping</div>
          <span>(selected)</span>
        </td>
        <td>
          {ProcessingStatusAndSteps}
        </td>
        <td>
          {OriginalFileName}
        </td>
        <td>
          <select data-value="{CodePage}" class="codePage">
            @ImportHelper.Encodings.Select(kvp => "<option value='{0}'>{1}</option>".FilledWith(kvp.Key, kvp.Value)).JoinedAsString().AsRawHtml()
          </select>
        </td>
        <td>
          <select data-value="{FirstDataRow}" class="dataRow">
            @Enumerable.Range(1, 10).Select(i => "<option value='{0}'>{1}</option>".FilledWith(i + 1, i)).JoinedAsString().AsRawHtml()
          </select>
        </td>
        <td>
          {UploadTimeExt}
        </td>
        <td>
          {FileSize}
        </td>
        <td>
          <button type="button" class="download" title="Download a copy of this file">
            <span class="ui-icon ui-icon-arrowreturn-1-s"></span>
          </button>
          <button type="button" class="deleteFile" title="Permanently delete this from the server">
            <span class="ui-icon ui-icon-trash"></span>
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>
<h2>
  Step 2 <span>Map columns</span>
</h2>
<p>
  For each column in <span id="activeFileName"></span> that you wish to import, select the TallyJ field it should be mapped to.
  If you have already done that, it does not need to be done again.
</p>
<div class="PullInstructionsHandle btn btn-mini">TallyJ Fields</div>
<div class="PullInstructions">
  <table class="fieldsList">
    <tr><th>First Name</th><td><em>Required</em></td><td>The individual's first/given name.</td></tr>
    <tr><th>Last Name</th><td><em>Required</em></td><td>The individual's last name/surname.</td></tr>
    <tr><th>Bahá'í Id</th><td></td><td>Useful for reporting.</td></tr>
    <tr><th>Eligibility Status</th><td></td><td>See below for details.</td></tr>
    <tr><th>Area</th><td></td><td>Geographical area. Useful for reporting.</td></tr>
    <tr><th>Email</th><td></td><td>Email or Phone needed for Online Voting.</td></tr>
    <tr><th>Phone</th><td></td><td>Email or Phone needed for Online Voting.</td></tr>
    <tr><th>Other Names</th><td></td><td>Other names this person may be known by.</td></tr>
    <tr><th>Other Last Names</th><td></td><td>Other names this person may be known by.</td></tr>
    <tr><th>Other Info</th><td></td><td>Other distinguishing information to identify this person.</td></tr>
  </table>
</div>
<div class="fieldSelector">
  <div class="numFound">Number of columns found in this CSV file: <span id="numColumns">-</span></div>
  @*<button type="button" id="btnPrepareFields">
      Re-analyze the file and get column names
    </button>*@
  <div id="fieldSelector">
  </div>
  <div id="mappingError"></div>
</div>
<p class="aboutEligibility">
  To set the "Eligibility Status" of anyone being imported, map a column to the Eligibility Status field.
  Any value in this column must <strong>exactly</strong> match one of the reasons below to be recognized. (Click a Reason to copy it.).
</p>
<div class="PullInstructionsHandle btn btn-mini">Eligibility Status Reasons</div>
<div class="PullInstructions">
  <div class="reasonExamples">
    <div class="reasonList">
      <h3>Valid "Eligibility Status" Reasons</h3>
      <p>Anyone with no entry is considered to be "Eligible"</p>
      <div id="listOfStatusReasons"></div>
    </div>
    <div class="reasonSamples">
      <h3>Recommended Status Settings</h3>
      <dl>
        <dt>For a local Assembly election</dt>
        <dd>All voters should be blank</dd>
        <dd>Others (youth, moved recently, etc) should have an appropriate status reason.</dd>
        <dt>For a tie-break election</dt>
        <dd>Set those being voted for to blank</dd>
        <dd>All others should have a status of: <strong>Tie-break: Not tied</strong></dd>
        <dt>For a by-election</dt>
        <dd>Set those serving on the Institution to: <strong>By-election: On Institution already</strong></dd>
        <dd>All other voters should be blank</dd>
        <dt>For a National Convention</dt>
        <dd>Delegates should be blank</dd>
        <dd>People that can be voted for (but are not delegates) should have a status of: <strong>Not a delegate in this election</strong></dd>
        <dd>Counsellors living in this country should have a status of: <strong>Not a delegate and on other Institution</strong></dd>
        <dd>Others (youth, recently moved, etc) should have an appropriate status reason.</dd>
      </dl>
    </div>
  </div>
</div>

<h2>
  Step 3 <span>Import people</span>
</h2>
<p>
  All the records in the file will be processed and added to the names already in the database. Any that match exactly will not be added again.
</p>
<p>
  After importing, use the "Edit People's Names" page to carefully review the list.
</p>
<p>
  Please note that email addresses and phone numbers can only be imported when there are none on file already. Use the "Edit People's Names" page to add email addresses and phone numbers later.
</p>
<p>
  If you need to erase all the currently loaded names (before ballots are entered), use the "Delete all People Records" below before importing again.
</p>
<div class="importDiv">
  <button type="button" id="btnImport">
    Import now
  </button>
  <button type="button" id="btnClearAll" class="float-right">
    Delete all People Records
  </button>
  <div class="DbCount float-right"><span>@Model.NumberOfPeople.ToString("N0")</span> people</div>
  <div id="importResults"></div>
</div>
