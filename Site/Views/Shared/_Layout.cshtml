@using System.Xml
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Resources
@using TallyJ.Code.Session
@using TallyJ.Code
@using TallyJ.EF
@{
  ContextItems.AddJavascriptForPage("test1", "site.testTime={0};".FilledWith(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss zzz").SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("time", "site.timeOffset={0};".FilledWith(UserSession.TimeOffsetServerAhead.SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("timeKnown", "site.timeOffsetKnown={0};".FilledWith(UserSession.TimeOffsetKnown.SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("rootUrl", "site.rootUrl='{0}';".FilledWith(Url.Content("~")));
  ContextItems.AddJavascriptForPage("site.passcode='{0}';".FilledWith(new PublicElectionLister().GetPasscodeIfAvailable(UserSession.CurrentElectionGuid)));
  var currentElection = UserSession.CurrentElection;
  ContextItems.AddJavascriptForPage("site.passcodeRaw='{0}';".FilledWith(currentElection == null ? "" : currentElection.ElectionPasscode));
  ContextItems.AddJavascriptForPage("page", "site.context='{0}';".FilledWith(ControllerActionNamesJoined));
  ContextItems.AddJavascriptForPage("electionGuid", "site.electionGuid='{0}';".FilledWith(UserSession.CurrentElectionGuid == Guid.Empty ? "" : UserSession.CurrentElectionGuid.ToString()));
  ContextItems.AddJavascriptForPage("electionState", "site.electionState='{0}';".FilledWith(UserSession.CurrentElectionStatus));
  var currentMenu = new MenuHelper(Url);
  var tellerHelper = new TellerHelper();
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='en'>
  <title>TallyJ - @(ViewBag.Title ?? currentMenu.CurrentPageTitle ?? ViewBag.Caption)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="msvalidate.01" content="BDA801FC5063E31B10FDB52B7C0ADC14">
  @RenderSection("Metas", false)
  @RenderPage("Headers.cshtml")
  <meta name="description" content="Baha'i Election System'" />
  <script type="application/ld+json">
    {
    "url": "http://tallyj.com",
    "logo": "https://tallyj.com/images/Logo150.png"
    }
  </script>
  @*<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" async>*@
</head>
@{
  var classes = new List<string> {
      ControllerActionNamesJoined,
      ScreenMode + "Mode",
      SettingsHelper.HostSupportsOnlineElections && currentElection != null ? "Online" + (currentElection.OnlineCurrentlyOpen ? "Open" : currentElection.OnlineEnabled ? "Closed" : "NotEnabled") : null,
      "Auth" + UserSession.AuthLevel,
      ContextItems.LocationModel.ShowLocationSelector(currentMenu) ? "HasLocations" : "NoLocations",
      ContextItems.LocationModel.HasMultiplePhysicalLocations ? "" : "HasOfflineLocations",
      currentElection == null ? null : "BP-" + currentElection.BallotProcessRaw,
      currentElection == null ? null : "T-" + currentElection.ElectionType
    };
}
<body class="@classes.JoinedAsString(" ", true)">
  <header>
    <div class="content-wrapper">
      <div class="MainTop">
        <h1 class="SeoH1">TallyJ - Bahá’í Election System</h1>
        <div class="site-title"
             onclick="location.href = '@Url.Action("Index", "Public")'"
             alt="TallyJ - Bahá’í Election System">
        </div>
        <div class="Version">
          <span title="Last updated: @TallyJ.Properties.Settings.Default.VersionDate">Version: @TallyJ.Properties.Settings.Default.VersionNum</span>
        </div>
      </div>
      @if (ScreenMode == "Normal")
      {
        @*<div class="beta1">
            <img src="~/Images/beta2.gif" alt="beta" />
            <p>
              TallyJ now has<br />Online Voting!<br />
              <a title="View document" href="https://docs.google.com/document/d/1ii9jKqHJbUiSz53sA6i1T8MRSeXpA2lQPRWHSSeLC0g/view"
                 target="gdoc">Details here</a>
            </p>
          </div>*@
      }
      @if (UserSession.IsAuthenticated && ViewBag.HideMenus != "true")
      {
        //var publicInfo = UserSession.CurrentElection != null ? new PublicElectionLister().PublicElectionInfo(UserSession.CurrentElection.C_RowId) : null;

        @*        <div id="MasterMenu" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">*@
        @*          @Html.Partial("MasterMenu")*@
        @*        </div>*@
        <div class="TopInfo">
          <span class="CurrentElectionName" title="Election Id: @(currentElection?.ElectionGuid)">
            @UserSession.CurrentElectionDisplayNameAndInfo
          </span>
          <div class="topArea">
            <div class="who">@(UserSession.IsKnownTeller ? "Admin" : "Teller")</div>
            @if (currentElection != null)
            {
              <div class="passcode passcodeOkay" title="Click to go to the Monitor page to change this">
                <span class="ui-icon ui-icon-info" id="qTipPasscode"></span>
                Tellers &#10003;
              </div>
              <div class="passcode passcodeLocked" title="Click to go to the Monitor page to change this">
                <span class="ui-icon ui-icon-locked" id="qTipPasscodeLocked"></span>
                Tellers &#10008;
              </div>
            }
            @if (SettingsHelper.HostSupportsOnlineElections)
            {
              <div class="onlineOpen">
                Online Voting &#10003;
              </div>
              <div class="onlineClosed">
                Online Voting &#10008;
              </div>
            }
          </div>
          @if (currentElection != null)
          {
            <div class="ElectionState">
              <span>Election State</span><span class="ui-icon ui-icon-info" id="qTipElectionStatus"></span>
              <div id="electionState"
                   data-state="@UserSession.CurrentElectionStatus">
                @currentMenu.StateSelectorItems()
                <span class="ui-icon ui-icon-info" id="qTipFinalized"></span>
                <span class="other"><a href="#" id="AllPages" title="Go to another page">Other Pages</a></span>
                <span class="QuickDash other">
                  @Html.Partial("../Dashboard/OtherItems", new ViewDataDictionary { { "ShowHomeLink", "Yes" } })
                </span>
              </div>

              @*<a href="#MasterMenu" class="ShowMasterMenu" data-toggle="modal">Go to any page...</a>*@
            </div>
            <div id="QuickLinks2">
              <div class="left">
                <span id="qmenuTitle"></span><span class="ui-icon ui-icon-info" id="qTipQuickLinks"></span>
              </div>
              <div class="right">
                <span id="quickLinkItems">@currentMenu.QuickLinks().AsRawHtml()</span>
              </div>
            </div>
            <div class="showBreadCrumb"></div>
          }
          else
          {
            <div class="Spacer"></div>
          }
        </div>
      }
    </div>
  </header>

  <div id="body">
    @RenderSection("featured", false)
    <section class="content-wrapper clear-fix">
      <div class="main-content">
        @if (UserSession.IsKnownTeller || UserSession.IsGuestTeller)
        {
          <span class="CompCode">@UserSession.CurrentComputerCode</span>
        }
      </div>
      @*<div class="PageTitle">@currentMenu.CurrentMenuTitle</div>*@
      @{
        var showLocationSelector = ContextItems.LocationModel.ShowLocationSelector(currentMenu);
        var showUnitSelector = currentElection?.IsLsa2 == true && currentMenu.ShowLocationSelection;
        var showTellerSelector = currentMenu.ShowTellerSelector;
      }
      @if (showLocationSelector || showTellerSelector || showUnitSelector)
      {
        <div class="CurrentInfo">
          @if (showUnitSelector)
          {
            <label for="ddlTopUnit" class="ddlTopUnit">
              Unit:
              @if (currentElection.IsLsa2M)
              {
                <select id="ddlTopUnit" class="TopUnit input-mediumMax">
                  <option value="">[All Units]</option>
                  @foreach (var o in UserSession.UnitNames)
                  {
                    <option value="@o">@o</option>
                  }
                </select>
              }
              else
              {
                <span>@currentElection.UnitName</span>
              }
            </label>
            @*<label>
                Computer:</label>
              <select disabled>
                <option>@UserSession.CurrentComputerCode</option>
              </select>*@
          }
          @if (showLocationSelector)
          {
            <label for="ddlTopLocation">
              Location:
              <select id="ddlTopLocation" class="TopLocation input-mediumMax" @ContextItems.LocationModel.ShowDisabled>
                @ContextItems.LocationModel.GetLocationOptions(true, ActionName != "FrontDesk" && ActionName != "SortBallots" && ActionName != "Reconcile")
              </select>
              <span class="ui-icon ui-icon-info" id="qTipTopLocation"></span>
            </label>
            @*<label>
                Computer:</label>
              <select disabled>
                <option>@UserSession.CurrentComputerCode</option>
              </select>*@
          }
          @if (showTellerSelector)
          {
            <label for="ddlTopTeller1">
              Teller at Keyboard:
              <select id="ddlTopTeller1" class="TopTeller input-mediumMax">
                @tellerHelper.GetTellerOptions(1).AsRawHtml()
              </select>
              <span class="ui-icon ui-icon-info" id="qTipTeller"></span>
            </label>
            <label for="ddlTopTeller2">
              Assisting:
              <select id="ddlTopTeller2" class="TopTeller input-mediumMax">
                @tellerHelper.GetTellerOptions(2).AsRawHtml()
              </select>
            </label>
          }
        </div>
      }
      @RenderBody()
    </section>
  </div>
  @RenderPage("Footer.cshtml")
  @RenderSection("scripts", required: false)
</body>
</html>
