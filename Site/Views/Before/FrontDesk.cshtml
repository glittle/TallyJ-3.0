@model PeopleModel
@using TallyJ.Code
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Resources
@using TallyJ.Code.Session
@using TallyJ.EF
@{
  ViewBag.Title = "Front Desk";
  ViewBag.Message = "Record who is voting...";

  var currentElection = UserSession.CurrentElection;
  var ballotProcess = currentElection.BallotProcessRaw;
  var ballotProcessEnum = currentElection.BallotProcess;

  var inPersonName = "In Person";

  switch (ballotProcessEnum)
  {
    case BallotProcessEnum.RegV:
      inPersonName = "Ballot Received";
      break;
  }

  ContextItems.AddJavascriptForPage("url", "frontDeskPage.controllerUrl={0};".FilledWith(Url.Action("Index").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("lastrow", "frontDeskPage.lastRowVersion={0};".FilledWith(Model.LastRowVersion));
  //ContextItems.AddJavascriptForPage("people", "frontDeskPage.initial={0};".FilledWith(Model.FrontDeskPersonLines().SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("people", "frontDeskPage.ballotProcess={0};".FilledWith(ballotProcess.QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("frontDeskPage.T24={0};".FilledWith(UserSession.CurrentElection.T24.SerializedAsJsonString()));

}
<div class="PullInstructionsHandle btn btn-mini">Instructions & Tips</div>
<div class="PullInstructions">
  <ol>
    <li>To quickly find a person, begin to type any part of the name or Bahá'í ID of the person you are looking for into the Search Box. Use the Up/Down arrow keys to move to the correct person, then press the Enter key to focus on them.</li>
    <li>A count of people with each status is shown at the top. Click on one to filter the list to that status. Press or click Esc to remove the filter.</li>
    @{
      switch (ballotProcessEnum)
      {
        case BallotProcessEnum.Roll:
          <li>
            Mark people as "@inPersonName" as they arrive at the election venue if they intend to cast their own ballot when
            the Roll Call is done.
          </li>
          break;
        case BallotProcessEnum.RegV:
          <li>
            Mark people as "Registered" as they arrive at the election venue if they intend to stay and cast their own ballot. When
            they return to a teller to deposit their ballot, mark them as "@inPersonName"
          </li>
          break;
        case BallotProcessEnum.RegC:
          <li>
            Mark people as "@inPersonName" when they register with a teller and deposit their ballot.
          </li>
          break;
      }
    }
  </ol>
</div>
<div class="SearchArea">
  <span><u>S</u>earch box: </span>
  <input accesskey="S" id="search">
  <span class="info fakeEsc">(Esc to clear)</span>
</div>
<div class="Counts">
  @if (currentElection.VotingMethodsContains(VotingMethodEnum.Imported.Value))
  {
    <div class="Imported" data-status="Imported" title="Click to filter the list">
      Imported
      <i>0</i>
    </div>
  }
  @if (currentElection.VotingMethodsContains("O"))
  {
    <div class="Online" data-status="Online" title="Click to filter the list">
      Online
      <i>0</i>
    </div>
  }
  @if (currentElection.VotingMethodsContains("C"))
  {
    <div class="CalledIn" data-status="CalledIn" title="Click to filter the list">
      Called In
      <i>0</i>
    </div>
  }
  @if (currentElection.VotingMethodsContains("M"))
  {
    <div class="MailedIn" data-status="MailedIn" title="Click to filter the list">
      Mailed In
      <i>0</i>
    </div>
  }
  @if (currentElection.VotingMethodsContains("D"))
  {
    <div class="DroppedOff" data-status="DroppedOff" title="Click to filter the list">
      Dropped Off
      <i>0</i>
    </div>
  }
  @if (currentElection.VotingMethodsContains("1"))
  {
    <div class="Custom1" data-status="Custom1" title="Click to filter the list">
      @currentElection.Custom1Name
      <i>0</i>
    </div>
  }
  @if (currentElection.VotingMethodsContains("2"))
  {
    <div class="Custom2" data-status="Custom2" title="Click to filter the list">
      @currentElection.Custom2Name
      <i>0</i>
    </div>
  }
  @if (currentElection.VotingMethodsContains("3"))
  {
    <div class="Custom3" data-status="Custom3" title="Click to filter the list">
      @currentElection.Custom3Name
      <i>0</i>
    </div>
  }
  @if (ballotProcessEnum == BallotProcessEnum.RegV)
  {
    <div class="Registered" data-status="Registered" title="Click to filter the list">
      Registered
      <i>0</i>
    </div>
  }
  @if (currentElection.VotingMethodsContains("P"))
  {
    <div class="InPerson" data-status="InPerson" title="Click to filter the list">
      @inPersonName
      <i>0</i>
    </div>
  }
  <div class="Total" data-status="Total" title="Click to filter the list">
    Total
    <i>0</i>
  </div>
  <span class="Other">
    Other <i>0</i>
  </span>
</div>
<div id="Main" class="@(new[] {"EnvMode-" + currentElection.EnvNumModeRaw }.JoinedAsString(" "))">
  <div id="selectorTip">
    Type the first letter of any button to select it. Press &larr; or &rarr; to move the selection. Press Enter to click. Press Esc when done.
  </div>
</div>
<div id="afterList"></div>

<script type="text/x-template" id="frontDeskLineTemplate">
  <div id="P{PersonId}" class="Voter VM-{VotingMethod} OnlineProcessed-{OnlineProcessed} Imported-{Imported} {extraClass}" data-name="{NameLower}">
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.Imported.Value))
    {
      <div data-vm="@VotingMethodEnum.Imported.Value" class="Btn Imported {Imported} Has{HasImported}">@VotingMethodEnum.Imported.DisplayText</div>
    }
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.Online.Value))
    {
      <div data-vm="@VotingMethodEnum.Online.Value" class="Btn Online {Online} Has{HasOnline} Can{CanBeOnline}">Online</div>
    }
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.CalledIn.Value))
    {
      <div data-vm="@VotingMethodEnum.CalledIn.Value" class="Btn CalledIn {CalledIn}">Called In</div>
    }
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.MailedIn.Value))
    {
      <div data-vm="@VotingMethodEnum.MailedIn.Value" class="Btn MailedIn {MailedIn}">Mailed In</div>
    }
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.DroppedOff.Value))
    {
      <div data-vm="@VotingMethodEnum.DroppedOff.Value" class="Btn DroppedOff {DroppedOff}">Dropped Off</div>
    }
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.Custom1.Value))
    {
      <div data-vm="@VotingMethodEnum.Custom1.Value" class="Btn Custom1 {Custom1}">@currentElection.Custom1Name</div>
    }
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.Custom2.Value))
    {
      <div data-vm="@VotingMethodEnum.Custom2.Value" class="Btn Custom2 {Custom2}">@currentElection.Custom2Name</div>
    }
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.Custom3.Value))
    {
      <div data-vm="@VotingMethodEnum.Custom3.Value" class="Btn Custom3 {Custom3}">@currentElection.Custom3Name</div>
    }
    <div class="Env">{EnvNum}</div>
    @switch (ballotProcessEnum)
    {
      case BallotProcessEnum.RegV:
        <div data-vm="@VotingMethodEnum.Registered.Value" class="Btn Registered {Registered}">Registered</div>
        break;
    }
    @if (currentElection.VotingMethodsContains(VotingMethodEnum.InPerson.Value))
    {
      <div data-vm="@VotingMethodEnum.InPerson.Value" class="Btn InPerson {InPerson}">@inPersonName</div>
    }
    <b>{FullName}</b>
    <p>{BahaiId}</p>
    <u title="Lives in">{Area}</u>
    <i>{^VotedAt}</i>
  </div>
</script>