@inherits RazorEngine.Templating.TemplateBase
@using Newtonsoft.Json
@using TallyJ.Code
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@using TallyJ.CoreModels
@using TallyJ.EF
@{
  var ballots = new BallotCacher().AllForThisElection;
  var locations = new LocationCacher().AllForThisElection;
  var results = new ResultCacher().AllForThisElection;
  var election = UserSession.CurrentElection;
  var votes = new VoteCacher().AllForThisElection;
  var isSingleNameElection = election.IsSingleNameElection;

  var data = ballots
    .OrderBy(b =>
    {
      var location = locations.FirstOrDefault(l => l.LocationGuid == b.LocationGuid);
      return location == null ? "" : location.Name;
    })
    .ThenBy(b => b.ComputerCode)
    .ThenBy(b => b.BallotNumAtComputer)
    .Select(b =>
    {
      var location = locations.FirstOrDefault(l => l.LocationGuid == b.LocationGuid);
      var locName = locations.Count > 1 && location != null ? location.Name : "";
      var locId = location == null ? 0 : location.C_RowId;
      return new
      {
        C_BallotCode = b.C_BallotCode,
        Location = locName,
        IsOnline = locName == LocationModel.OnlineLocationName,
        BallotId = b.C_RowId,
        LocationId = locId,
        b.StatusCode,
        Spoiled = b.StatusCode != BallotStatusEnum.Ok,
        Votes = new BallotHelper().VoteInfosForBallot(b, votes)
          .GroupJoin(results, v => v.PersonGuid, r => r.PersonGuid, (v, rList) => new { v, tied = rList.Any(r => r.TieBreakRequired.GetValueOrDefault()) })
          .OrderBy(g => isSingleNameElection ? g.v.PersonFullNameFL : g.v.PositionOnBallot.ToString("0000"))
          .Select(g => new
          {
            g.v.PersonFullNameFL,
            g.v.SingleNameElectionCount,
            g.v.OnlineVoteRaw,
            Spoiled = g.v.VoteStatusCode != VoteStatusCode.Ok,
            TieBreakRequired = g.tied,
            VoteInvalidReasonDesc =
              IneligibleReasonEnum.DescriptionFor(
                g.v.VoteIneligibleReasonGuid.AsGuid()).
                SurroundContentWith("[", "]")
          })
      };
    })
    .Where(b => b.Votes.Any(v => v.TieBreakRequired))
    .ToList();
}
<style>
  table.Ballots td {
    border: 1px solid #ccc;
    vertical-align: top;
    padding: 1px 3px 2px 5px;
  }

  table.Ballots {
    width: 100%;
    border-collapse: collapse;
    border-left-style: hidden;
    border-right-style: hidden;
    border-bottom-style: hidden;
  }

    table.Ballots td:first-child {
      white-space: nowrap;
    }

  .Count {
    font-weight: bold;
    padding-left: 2px;
  }

  .Ballot {
    margin-top: 3px;
    counter-reset: voteNum;
  }

  .BallotSpoiled,
  .BallotSpoiled div,
  .BallotSpoiled span {
    text-decoration: line-through;
    color: red;
  }

  .Ballot > div {
    display: table-cell;
  }

    .Ballot > div:first-child {
    }

  .Ballot .Vote {
    display: inline-block;
    white-space: normal;
    margin-right: 10px;
  }

    .Ballot .Vote.Line {
      display: block;
    }

      .Ballot .Vote.Line:nth-child(even) {
        background-color: #eee;
      }

    .Ballot .Vote .Person {
      white-space: inherit;
    }

  .Ballot.Online .Vote {
    display: inline-flex;
  }

    .Ballot.Online .Vote::before {
      padding-right: 4px;
    }

  .raw {
    border: 1px solid grey;
    color: #444;
    background: #ececec;
    padding: 0 3px;
    margin: 0 0 0 5px;
    display: inline-flex;
  }

    .raw .f {
      padding-right: 4px;
    }

    .raw .o {
      padding-left: 4px;
      font-style: italic;
      margin-left: 10px;
    }


  .Vote::before {
    counter-increment: voteNum;
    content: counter(voteNum);
    font-size: 60%;
  }

  .Ballot .Vote .Invalid {
    color: red;
    font-style: italic;
    font-size: 90%;
  }

  .Ballot .Vote.Tied, .TitleTied {
    color: #ef8600;
  }

  .Spoiled {
    color: red;
  }

  .BallotSpoiled .Vote.Tied .Person {
    color: #ef8600;
  }

  .Spoiled .Person {
    text-decoration: line-through;
  }

  p.Comment.Invalid {
    color: red;
  }
</style>
<div class="body">
  <div class="reportHead">
    <h1 id="title"></h1>
    <div class="byTitle">
      <div>@UserSession.CurrentElectionName</div>
      <div id="titleDate"></div>
    </div>
  </div>
  <p class="Comment">
    This is showing only the ballots that contain votes for <span class="TitleTied">people involved in a tie</span>.
  </p>
  <p class="Comment">
    This listing can be used to review ballots entered.  To "re-count", check this listing against the paper ballots to ensure that all ballots were entered correctly.
  </p>
  @if (!data.Any())
  {
    <p class="Comment">None Found</p>
  }
  <table class="Ballots">
    @foreach (var ballot in data)
    {
      <tr class="Ballot @(ballot.Spoiled ? "BallotSpoiled" : "") @(ballot.IsOnline ? "Online" : "")">
        <td>
          <a href="../Ballots?l=@ballot.LocationId&b=@ballot.BallotId" target="ballot">@ballot.C_BallotCode</a>
          <div>@ballot.StatusCode</div>
          <div>@ballot.Location</div>
        </td>
        <td>
          @foreach (var vote in ballot.Votes)
          {
            if (isSingleNameElection)
            {
              <div class="Vote Line @(vote.Spoiled ? "Spoiled" : "") @(vote.TieBreakRequired ? "Tied" : "")">
                <span class="Person">@Raw(vote.PersonFullNameFL)</span>
                <span class="Invalid">@vote.VoteInvalidReasonDesc</span>
                <span class="Count">@vote.SingleNameElectionCount</span>
                @if (vote.OnlineVoteRaw.HasContent())
                {
                  var json = JsonConvert.DeserializeObject<OnlineRawVote>(vote.OnlineVoteRaw);
                  <span class="raw">
                    @json.First.SurroundContentWith("<span class=f>", "</span>")
                    @json.Last.SurroundContentWith("<span class=l>", "</span>")
                    @json.OtherInfo.SurroundContentWith("<span class=o>", "</span>")
                  </span>
                }
              </div>
            }
            else
            {
              <span class="Vote @(vote.Spoiled ? "Spoiled" : "") @(vote.TieBreakRequired ? "Tied" : "")">
                <span class="Person">@Raw(vote.PersonFullNameFL)</span>
                <span class="Invalid">@vote.VoteInvalidReasonDesc</span>
                @if (vote.OnlineVoteRaw.HasContent())
                {
                  var json = JsonConvert.DeserializeObject<OnlineRawVote>(vote.OnlineVoteRaw);
                  <span class="raw">
                    @json.First.SurroundContentWith("<span class=f>", "</span>")
                    @json.Last.SurroundContentWith("<span class=l>", "</span>")
                    @json.OtherInfo.SurroundContentWith("<span class=o>", "</span>")
                  </span>
                }
              </span>
            }
          }
        </td>

      </tr>
    }
  </table>
</div>