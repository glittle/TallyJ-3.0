@using System.Linq
@using TallyJ.Code.Enumerations
@using TallyJ.Code
@using TallyJ.Code.Data
@using TallyJ.Code.Session
@using TallyJ.Code.UnityRelated
@inherits RazorEngine.Templating.TemplateBase
@{
  var dbContext = UnityInstance.Resolve<IDbContextFactory>().GetNewDbContext;
  var currentElectionGuid = UserSession.CurrentElectionGuid;

  var peopleWithEmails = dbContext.Person
    .Where(p => p.ElectionGuid == currentElectionGuid && (p.Email != null || p.Phone != null))
    .GroupJoin(dbContext.OnlineVotingInfo, p => new { p.PersonGuid, p.ElectionGuid },
      ovi => new { ovi.PersonGuid, ovi.ElectionGuid }, (p, oviList) => new { p, ovi = oviList.FirstOrDefault() })
    .GroupJoin(dbContext.OnlineVoter, j => j.p.Email, ov => ov.VoterId, (j, ovList) => new { j.p, j.ovi, ovEmail = ovList.FirstOrDefault() })
    .GroupJoin(dbContext.OnlineVoter, j => j.p.Phone, ov => ov.VoterId, (j, ovList) => new { j.p, j.ovi, j.ovEmail, ovPhone = ovList.FirstOrDefault() })
    .Select(j => new
    {
      j.p.C_FullName,
      j.p.BahaiId,
      j.p.Email,
      j.p.Phone, CanVote = j.p.CanVote,
      HasSignedInEmail = j.ovEmail != null,
      HasSignedInPhone = j.ovPhone != null,
      HasViewedThisElection = j.ovi != null,
      j.p.VotingMethod,
    })
    .OrderBy(j => j.C_FullName)
    .ToList();
}
<style>
  tr {
    -moz-page-break-inside: avoid;
    page-break-inside: avoid;
  }

    tr:nth-child(even) {
      background-color: #eee;
    }

    tr.cannotVote .name, tr.cannotVote .email {
      text-decoration: line-through;
    }

  thead {
    display: table-header-group;
    font-weight: bold;
  }

  td {
    padding-left: 2px;
    padding-right: 6px;
  }

  .email.none {
    color: #999;
  }
</style>
<div class="body">
  <div class="reportHead">
    <h1 id="title"></h1>
    <div class="byTitle">
      <div>@UserSession.CurrentElectionName</div>
      <div id="titleDate"></div>
    </div>
  </div>
  <button class="btn btn-mini btnDownloadCsv" data-table=".Voters" type="button" title="Download in CSV format for Excel">Export</button>
  <p class="Comment">
    All people with an email address or mobile phone number on file.
  </p>
  <table class="Voters sortable">
    <thead>
      <tr>
        <td>Person</td>
        <td>Status</td>
        <td>Email</td>
        <td>Phone</td>
        <td>Login</td>
        <td>Voting Method</td>
        <td>Id</td>
      </tr>
    </thead>
    <tbody>
      @foreach (var info in peopleWithEmails)
      {
        var usage = new List<string>
          {
            //info.HasViewedThisElection ? "Voted" : "",
            info.HasSignedInEmail ? "Email" : "",
            info.HasSignedInPhone ? "Phone" : "",
          }.Where(s => s.HasContent()).JoinedAsString(", ").DefaultTo("-");
        var what = new List<string>
        {
          info.Email,
          info.Phone
        }.Where(s => s.HasContent()).JoinedAsString("<br>");
        <tr class="@(info.CanVote.GetValueOrDefault() ? "" : "cannotVote")">
          <td class="name">@Raw(info.C_FullName)</td>
          <td>@(info.CanVote.GetValueOrDefault() ? "-" : "Cannot Vote")</td>
          <td class="email @(info.HasSignedInEmail ? "" : "none")">@info.Email</td>
          <td class="email @(info.HasSignedInPhone ? "" : "none")">@info.Phone</td>
          <td class="usage">@Raw(usage)</td>
          <td class="method">@VotingMethodEnum.TextFor(info.VotingMethod).DefaultTo("-")</td>
          <td class="id">@info.BahaiId</td>
        </tr>
      }
    </tbody>
  </table>
</div>
