@inherits RazorEngine.Templating.TemplateBase
@using TallyJ.Code
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@using TallyJ.CoreModels
@using TallyJ.EF
@{
  var ballots = new BallotCacher().AllForThisElection;
  var locations = new LocationCacher().AllForThisElection;
  var election = UserSession.CurrentElection;
  var votes = new VoteCacher().AllForThisElection;
  var isSingleNameElection = election.IsSingleNameElection;

  var data = ballots
    .Where(b => b.StatusCode != BallotStatusEnum.Empty)
    .OrderBy(b =>
    {
      var location = locations.FirstOrDefault(l => l.LocationGuid == b.LocationGuid);
      return location == null ? "" : location.Name;
    })
    .ThenBy(b => b.ComputerCode)
    .ThenBy(b => b.BallotNumAtComputer)
    .Select(b =>
    {
      var location = locations.FirstOrDefault(l => l.LocationGuid == b.LocationGuid);
      var locName = locations.Count > 1 && location != null ? location.Name : "";
      var locId = location == null ? 0 : location.C_RowId;
      return new
      {
        C_BallotCode = b.C_BallotCode,
        Location = locName,
        BallotId = b.C_RowId,
        LocationId = locId,
        b.StatusCode,
        Spoiled = b.StatusCode != BallotStatusEnum.Ok,
        Votes = new BallotHelper().VoteInfosForBallot(b, votes)
          .OrderBy(v => isSingleNameElection ? v.PersonFullNameFL : v.PositionOnBallot.ToString("0000"))
          .Select(v => new
          {
            v.PersonFullNameFL,
            v.PersonGuid,
            v.VoteIneligibleReasonGuid,
            v.SingleNameElectionCount,
            Spoiled = v.VoteStatusCode != VoteHelper.VoteStatusCode.Ok,
            VoteInvalidReasonDesc =
              IneligibleReasonEnum.DescriptionFor(
                v.VoteIneligibleReasonGuid.AsGuid()).
                SurroundContentWith("[", "]")
          })
      };
    })
    .Select(ballotInfo => new
    {
      VoteHash = ballotInfo.Votes.Select(v => (v.PersonGuid ?? v.VoteIneligibleReasonGuid).ToString()).JoinedAsString(","),
      ballotInfo
    })
    .GroupBy(b => b.VoteHash)
    .Where(g => g.Count() > 1);

  var groupNum = 1;
}
<style>
  table.Ballots td {
    border: 1px solid #ccc;
    vertical-align: top;
    padding: 1px 3px 2px 5px;
  }

  table.Ballots {
    border-collapse: collapse;
    border-left-style: hidden;
    border-right-style: hidden;
    border-bottom-style: hidden;
  }

    table.Ballots td:first-child {
      white-space: nowrap;
    }

  .Count {
    font-weight: bold;
    padding-left: 2px;
  }

  .Ballot {
    margin-top: 3px;
    counter-reset: voteNum;
  }

  .BallotSpoiled,
  .BallotSpoiled div,
  .BallotSpoiled span {
    text-decoration: line-through;
    color: red;
  }

  .Ballot > div {
    display: table-cell;
  }

    .Ballot > div:first-child {
    }

  .Ballot .Vote {
    display: inline-block;
    white-space: normal;
    margin-right: 10px;
  }

    .Ballot .Vote .Person {
      white-space: inherit;
    }

  .Vote::before {
    counter-increment: voteNum;
    content: counter(voteNum);
    font-size: 60%;
  }

  .Ballot .Vote .Invalid {
    color: red;
    font-style: italic;
    font-size: 90%;
  }

  .Spoiled {
    color: red;
  }

    .Spoiled .Person {
      text-decoration: line-through;
    }
</style>
<div class="body">
  <h1 id="title"></h1>
  <p class="Comment">
    This indicates any groups of ballots that are identical. (Because ballots are anonymous, we cannot determine who cast these ballots.)
  </p>

  @if (!data.Any())
  {
    <p>None found.</p>
  }

  <div class="group">
    @foreach (var group in data)
    {
      <h2>Group @(groupNum++)</h2>

      <table class="Ballots">

        @foreach (var g in group)
        {
          var ballot = g.ballotInfo;
          <tr class="Ballot @(ballot.Spoiled ? "BallotSpoiled" : "")">
            <td>
              <a href="../Ballots?l=@ballot.LocationId&b=@ballot.BallotId" target="ballot">@ballot.C_BallotCode</a>
              <div>@ballot.StatusCode</div>
              <div>@ballot.Location</div>
            </td>
            <td>
              @foreach (var vote in ballot.Votes)
              {
                <span class="Vote @(vote.Spoiled ? "Spoiled" : "")">
                  @if (isSingleNameElection)
                  {
                    <span class="Person">@Raw(vote.PersonFullNameFL)</span>
                    <span class="Invalid">@vote.VoteInvalidReasonDesc</span>
                    <span class="Count">@vote.SingleNameElectionCount</span>
                  }
                  else
                  {
                    <span class="Person">@Raw(vote.PersonFullNameFL)</span>
                    <span class="Invalid">@vote.VoteInvalidReasonDesc</span>
                  }
                </span>
              }
            </td>

          </tr>

        }
      </table>

    }
  </div>

</div>