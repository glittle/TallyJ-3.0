@using TallyJ.Code.Session
@using TallyJ.Code
@using TallyJ.Code.Enumerations
@using TallyJ.EF
@inherits RazorEngine.Templating.TemplateBase
@{
  var people = new PersonCacher().AllForThisElection
    .Where(p => !p.CanVote.GetValueOrDefault() || !p.CanReceiveVotes.GetValueOrDefault())
    .OrderBy(p => p.FullName)
    .Select(p => new
    {
      PersonName = p.FullName,
      p.CanReceiveVotes,
      p.CanVote,
      InvalidReasonDesc = IneligibleReasonEnum.DescriptionFor(p.IneligibleReasonGuid.AsGuid()),
      p.VotingMethod
    });
  var initial = ' ';
}
<style>
  b {
    display: inline-block;
  }

  .name {
    text-align: left;
    width: 40%;
  }

  .vote {
    padding: 0 3px;
    text-align: center;
  }

  .CannotReceiveVotes::before {
    content: '🚫 ';
  }

  .CannotVote::after {
    content: ' ⛔';
  }

  .method {
    text-align: left;
    white-space: nowrap;
  }
</style>
<div class="body">
  <div class="reportHead">
    <h1 id="title"></h1>
    <div class="byTitle">
      <div>@UserSession.CurrentElectionName</div>
      <div id="titleDate"></div>
    </div>
  </div>
  <button class="btn btn-mini btnDownloadCsv" data-table=".Voters" type="button" title="Download in CSV format for Excel">Export</button>
  <p class="Comment">
    Showing all who have a specific eligibility status for this election.
  </p>
  <table class="Voters sortable">
    <thead>
      <tr class="person header">
        <th class="name">Person</th>
        <th class="method">Status</th>
        <th class="vote">Can Be Voted For</th>
        <th class="vote">Can Vote</th>
        <th class="vote">How Voted</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var person in people)
      {
        var name = person.PersonName;
        var first = name.ToUpper()[0];
        var firstClass = "";
        if (first != initial)
        {
          initial = first;
          name = "<b>" + initial + "</b>" + name.Substring(1);
          firstClass = "first";
        }
        //      var ineligible = "";
        //      if (person.InvalidReasonDesc.HasContent())
        //      {
        //        ineligible = "ineligible";
        //        name += "<span class=reason>{0}</span>".FilledWith(person.InvalidReasonDesc);
        //      }

        <tr class="person @firstClass @Raw(person.CanVote.GetValueOrDefault() ? "" : "NoVote") @Raw(person.CanReceiveVotes.GetValueOrDefault() ? "" : "NoVote")">
          <td class="name">@Raw(name)</td>
          <td class="method">@person.InvalidReasonDesc</td>
          <td class="vote @(person.CanReceiveVotes.GetValueOrDefault() ? "" : "CannotReceiveVotes")">@Raw(person.CanReceiveVotes.GetValueOrDefault() ? "Yes" : "No")</td>
          <td class="vote @(person.CanVote.GetValueOrDefault() ? "" : "CannotVote")">@Raw(person.CanVote.GetValueOrDefault() ? "Yes" : "No")</td>
          <td class="vote @(person.VotingMethod.HasContent() ? "Vote" : "")">@Raw(VotingMethodEnum.TextFor(person.VotingMethod, "-"))</td>
        </tr>
      }
    </tbody>
  </table>
</div>