@inherits RazorEngine.Templating.TemplateBase
@using Newtonsoft.Json
@using TallyJ.Code
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@using TallyJ.CoreModels
@using TallyJ.EF
@{
  var ballots = new BallotCacher().AllForThisElection;
  var locations = new LocationCacher().AllForThisElection;
  var election = UserSession.CurrentElection;
  var votes = new VoteCacher().AllForThisElection;
  var isSingleNameElection = election.IsSingleNameElection;

  var data = ballots
    .Join(locations.Where(l => l.Name == LocationModel.ImportedLocationName), b => b.LocationGuid, l => l.LocationGuid, (b, l) => new { b, LocationId = l.C_RowId })
    .OrderBy(bl => bl.b.BallotNumAtComputer)
    .Select(bl =>
    {
      return new
      {
        bl.b.C_BallotCode,
        BallotId = bl.b.C_RowId,
        bl.LocationId,
        bl.b.StatusCode,
        Spoiled = bl.b.StatusCode != BallotStatusEnum.Ok,
        Votes = new BallotHelper().VoteInfosForBallot(bl.b, votes)
          .OrderBy(v => isSingleNameElection ? v.PersonFullNameFL : v.PositionOnBallot.ToString("0000"))
          .Select(v => new
          {
            v.PersonFullNameFL,
            v.SingleNameElectionCount,
            v.OnlineVoteRaw,
            Spoiled = v.VoteStatusCode != VoteStatusCode.Ok,
            VoteInvalidReasonDesc =
              IneligibleReasonEnum.DescriptionFor(
                v.VoteIneligibleReasonGuid.AsGuid()).
                SurroundContentWith("[", "]")
          })
      };
    });
}
<style>
  table.Ballots td {
    border: 1px solid #ccc;
    vertical-align: top;
    padding: 1px 3px 2px 5px;
  }

  table.Ballots {
    width: 100%;
    border-collapse: collapse;
    border-left-style: hidden;
    border-right-style: hidden;
    border-bottom-style: hidden;
  }

    table.Ballots td:first-child {
      white-space: nowrap;
    }

  .Count {
    font-weight: bold;
    padding: 0 5px;
    float: right;
  }

  .Ballot {
    margin-top: 3px;
    counter-reset: voteNum;
    page-break-inside: avoid;
  }

  .BallotSpoiled,
  .BallotSpoiled div,
  .BallotSpoiled span {
    text-decoration: line-through;
    color: red;
  }

  .Ballot > div {
    display: table-cell;
  }

    .Ballot > div:first-child {
    }

  .Ballot .Vote {
    display: inline-block;
    white-space: normal;
    margin-right: 10px;
  }

    .Ballot .Vote.Line {
      display: block;
    }

      .Ballot .Vote.Line:nth-child(even) {
        background-color: #eee;
      }

    .Ballot .Vote .Person {
      white-space: inherit;
    }

  .Ballot.Online .Vote {
    display: inline-flex;
  }

    .Ballot.Online .Vote::before {
      padding-right: 4px;
    }

  .raw {
    border: 1px solid grey;
    color: #444;
    background: #ececec;
    padding: 0 3px;
    margin: 0 5px 0 0;
    display: inline-flex;
  }

    .raw .f {
      padding-right: 4px;
    }

    .raw .o {
      padding-left: 4px;
      font-style: italic;
      margin-left: 10px;
    }


  .Vote::before {
    counter-increment: voteNum;
    content: counter(voteNum);
    font-size: 60%;
  }

  .Ballot .Vote .Invalid {
    color: red;
    font-style: italic;
    font-size: 90%;
  }

  .Spoiled {
    color: red;
  }

    .Spoiled .Person {
      text-decoration: line-through;
    }
</style>
<div class="body">
  <div class="reportHead">
    <h1 id="title"></h1>
    <div class="byTitle">
      <div>@UserSession.CurrentElectionName</div>
      <div id="titleDate"></div>
    </div>
  </div>
  <p class="Comment">
    This listing contains all the ballots that were submitted online.
    A printed copy of this list of ballots could be stored with the paper ballots for archival purposes.
    Please note that online votes that have not yet been processed do not appear here.
  </p>
  <table class="Ballots">
    @foreach (var ballot in data)
    {
      <tr class="Ballot @(ballot.Spoiled ? "BallotSpoiled" : "") Online">
        <td>
          <a href="../Ballots?l=@ballot.LocationId&b=@ballot.BallotId" target="ballot">@ballot.C_BallotCode</a>
          <div>@ballot.StatusCode</div>
        </td>
        <td>
          @foreach (var vote in ballot.Votes)
          {
            if (isSingleNameElection)
            {
              <div class="Vote Line @(vote.Spoiled ? "Spoiled" : "")">
                @if (vote.OnlineVoteRaw.HasContent())
                {
                  var json = JsonConvert.DeserializeObject<OnlineRawVote>(vote.OnlineVoteRaw);
                  <span class="raw">
                    @Raw(json.First.SurroundContentWith("<span class=f>", "</span>"))
                    @Raw(json.Last.SurroundContentWith("<span class=l>", "</span>"))
                    @Raw(json.OtherInfo.SurroundContentWith("<span class=o>", "</span>"))
                  </span>
                }
                <span class="Person">@Raw(vote.PersonFullNameFL)</span>
                <span class="Invalid">@vote.VoteInvalidReasonDesc</span>
                <span class="Count">@vote.SingleNameElectionCount</span>
              </div>
            }
            else
            {
              <span class="Vote @(vote.Spoiled ? "Spoiled" : "")">
                @if (vote.OnlineVoteRaw.HasContent())
                {
                  var json = JsonConvert.DeserializeObject<OnlineRawVote>(vote.OnlineVoteRaw);
                  <span class="raw">
                    @Raw(json.First.SurroundContentWith("<span class=f>", "</span>"))
                    @Raw(json.Last.SurroundContentWith("<span class=l>", "</span>"))
                    @Raw(json.OtherInfo.SurroundContentWith("<span class=o>", "</span>"))
                  </span>
                }
                <span class="Person">@Raw(vote.PersonFullNameFL)</span>
                <span class="Invalid">@vote.VoteInvalidReasonDesc</span>
              </span>
            }
          }
        </td>

      </tr>
    }
  </table>
</div>