@using TallyJ.Code
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@using TallyJ.CoreModels
@using TallyJ.CoreModels.Helper
@using TallyJ.EF
@model ResultSummary
@{
  var currentElection = UserSession.CurrentElection;

  var dbContext = UserSession.GetNewDbContext;

  var result = new ResultCacher(dbContext).AllForThisElection
      .OrderBy(r => r.Rank)
      .Take(currentElection.NumberToElect.AsInt() + currentElection.NumberExtra.AsInt())
      .ToList()
      .Join(new PersonCacher(dbContext).AllForThisElection,
        r => r.PersonGuid,
        p => p.PersonGuid,
        (result1, person) => new { person, result1 })
      .ToList();

  var rows = result.Select(rp => new
  {
    Name = rp.person.FullName,
    rp.person.BahaiId,
    RowClass = rp.result1.Section,
    Rank = rp.result1.Section == ResultHelper.Section.Extra
      ? "Next " + rp.result1.RankInExtra
      : rp.result1.Rank.ToString(),
    VoteCountPlus = rp.result1.VoteCount.GetValueOrDefault() +
                    (rp.result1.TieBreakRequired.GetValueOrDefault()
                      ? " / {0}".FilledWith(rp.result1.TieBreakCount)
                      : ""),
  }).ToList();

  var spoiledBallots = new BallotCacher().AllForThisElection
    .Where(bi => bi.StatusCode != BallotStatusEnum.Ok)
    .GroupBy(b => b.StatusCode, (code, bList) => new { Reason = BallotStatusEnum.TextFor(code), BallotCount = bList.Count() })
    .ToList();

  var summary = new ResultSummaryCacher(dbContext).AllForThisElection.First(rs => rs.ResultType == ResultType.Final);
  if (summary.SpoiledManualBallots > 0)
  {
    spoiledBallots.Add(new { Reason = "Unknown (Manual Count)", BallotCount = summary.SpoiledManualBallots.Value });
  }

  var spoiledVotes = new BallotCacher().AllForThisElection
    .Where(bi => bi.StatusCode == BallotStatusEnum.Ok)
    .Join(new VoteCacher().AllForThisElection, b => b.BallotGuid, v => v.BallotGuid, (b, v) => v)
    .GroupJoin(new PersonCacher().AllForThisElection, v => v.PersonGuid, p => p.PersonGuid, (v, pList) =>
    {
      var person = pList.FirstOrDefault();
      return new
      {
    //person,
    Reason = v.InvalidReasonGuid ?? (person == null ? null : (person.CanReceiveVotes.GetValueOrDefault() ? null : person.IneligibleReasonGuid))
      };
    })
.GroupBy(r => r.Reason, (r, rList) => new
{
  Reason = r,
//name = rList.Where(g => g.person != null).Select(g => g.person.FullName).FirstOrDefault(),
VoteCount = rList.Count()
})
.Select(g => new
{
  g.VoteCount,
//g.name,
InvalidReasonDesc =
UserSession.CurrentElection.ElectionType == ElectionTypeEnum.Nsa && g.Reason == IneligibleReasonEnum.IneligiblePartial2_Not_a_Delegate
  ? null : IneligibleReasonEnum.DescriptionFor(g.Reason.AsGuid()),
})
.Where(r => r.InvalidReasonDesc.HasContent())
.ToList();

  var hasTies = rows.Any(r => r.VoteCountPlus.Contains("/"));
}
<style>
  table.result1 {
    margin-left: 10px;
    width: auto;
  }

    table.result1 thead {
      background-color: #f0f0ff;
    }

    table.result1 td, table.result1 th {
      text-align: center;
    }

    table.result1 tr td:nth-child(2) {
      text-align: left;
    }

  .table tr.E td {
    border-top: 3px double #bbb;
  }

  .table tr.E + tr.E td {
    border-top: 1px solid #ddd;
  }

  table.resultInfo {
    margin-left: 13px;
  }

    table.resultInfo tr td {
      vertical-align: top;
      padding: 1px 7px;
    }

    table.resultInfo tr.spoiledList td {
      line-height: normal;
      padding: 1px 0 0 1em;
      font-size: 85%;
      color: #666;
    }

    table.resultInfo tr.spoiledList:last-child td {
      padding-bottom: 4px;
    }

    table.resultInfo tr.space td {
      padding: 10px 0 0 0;
    }

    table.resultInfo tr.line td {
      padding: 6px 0 0 7px;
    }

  tr.line div {
    border-top: 1px solid #ccc;
    padding-bottom: 6px;
  }

  table.resultInfo tr.pct td:last-child {
    padding-right: 0;
  }
</style>
<div class="body WarnIfNotFinalized">
  <h2>
    <button class="btn btn-mini btnDownloadCsv" data-table=".result1" data-file=" - Electees" type="button">Export Elected</button>
    <button class="btn btn-mini btnDownloadCsv" data-table=".resultInfo" type="button" data-file=" - Statistics">Export Stats</button>

    @currentElection.Name
  </h2>
  <blockquote>
    <div>Convener: @currentElection.Convenor</div>
    <div>Date: @currentElection.DateOfElection.AsHtmlString()</div>
  </blockquote>
  <table class="resultInfo">
    <tr>
      <td>
        Eligible voters
      </td>
      <td>
        @Model.NumEligibleToVote.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt1Detail">
      <td>
        Voted
      </td>
      <td>
        @Model.SumOfEnvelopesCollected.AsInt().ToString("N0")
      </td>
    </tr>

    <tr class="rpt1Detail Warning @(Model.SumOfEnvelopesCollected == Model.NumBallotsWithManual ? "Hidden" : "")">
      <td>
        Ballots received ≠ Voted
      </td>
      <td>
        @Model.NumBallotsWithManual.AsInt().ToString("N0")
      </td>
    </tr>

    <tr class="space"><td colspan="2"><div></div></td></tr>

    <tr class="rpt1Detail pct">
      <td>
        Percentage of participation
      </td>
      <td>
        @((Model.PercentParticipation / 100.0).ToString("P0"))
      </td>
    </tr>

    <tr class="space"><td colspan="2"><div></div></td></tr>

    <tr class="rpt1Detail">
      <td>
        Did not vote
      </td>
      <td>
        @((Model.NumEligibleToVote - Model.SumOfEnvelopesCollected).AsInt().ToString("N0"))
      </td>
    </tr>

    <tr class="line"><td colspan="2"><div></div></td></tr>

    <tr class="rpt1Detail">
      <td>
        Ballots cast in person
      </td>
      <td>
        @Model.InPersonBallots.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt1Detail">
      <td>
        Ballots received by mail
      </td>
      <td>
        @Model.MailedInBallots.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt1Detail">
      <td>
        Ballots hand-delivered
      </td>
      <td>
        @Model.DroppedOffBallots.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt1Detail @(Model.OnlineBallots == 0 ? "Hidden" : "")">
      <td>
        Ballots cast online
      </td>
      <td>
        @Model.OnlineBallots.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt1Detail @(Model.ImportedBallots == 0 ? "Hidden" : "")">
      <td>
        Ballots imported
      </td>
      <td>
        @Model.ImportedBallots.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt1Detail @(Model.CalledInBallots == 0 ? "Hidden" : "")">
      <td>
        Ballots phoned-in
      </td>
      <td>
        @Model.CalledInBallots.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt1Detail @(Model.Custom1Ballots == 0 ? "Hidden" : "")">
      <td>
        Ballots: @currentElection.Custom1Name
      </td>
      <td>
        @Model.Custom1Ballots.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt2Detail @(Model.Custom2Ballots == 0 ? "Hidden" : "")">
      <td>
        Ballots: @currentElection.Custom2Name
      </td>
      <td>
        @Model.Custom2Ballots.AsInt().ToString("N0")
      </td>
    </tr>
    <tr class="rpt3Detail @(Model.Custom3Ballots == 0 ? "Hidden" : "")">
      <td>
        Ballots: @currentElection.Custom3Name
      </td>
      <td>
        @Model.Custom3Ballots.AsInt().ToString("N0")
      </td>
    </tr>

    <tr class="line"><td colspan="2"><div></div></td></tr>

    <tr class="rpt1Detail">
      <td>
        Spoiled ballots
      </td>
      <td>
        @Model.SpoiledBallots.AsInt().ToString("N0")
      </td>
    </tr>
    @foreach (var b in spoiledBallots.OrderByDescending(b => b.BallotCount))
    {
      <tr class="spoiledList">
        <td colspan="2">
          @b.BallotCount - @b.Reason
        </td>
      </tr>
    }
    <tr class="line"><td colspan="2"><div></div></td></tr>
    <tr class="rpt1Detail">
      <td>
        Spoiled votes
      </td>
      <td>
        @Model.SpoiledVotes.AsInt().ToString("N0")
      </td>
    </tr>
    @foreach (var v in spoiledVotes.OrderByDescending(v => v.VoteCount).ThenBy(v => v.InvalidReasonDesc))
    {
      <tr class="spoiledList">
        <td colspan="2">
          @v.VoteCount - @v.InvalidReasonDesc
        </td>
      </tr>
    }
  </table>
  <div class="page">
    <h2 class="SectionTitle">
      Elected
    </h2>
    <table class="result1 table table-bordered table-condensed">
      <thead>
        <tr>
          <th>#</th>
          <th>Name</th>
          <th>Bahá'í Id</th>
          <th>Votes @(hasTies ? " / Tie Break" : "")</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var row in rows)
        {
          <tr class="@row.RowClass">
            <td>@row.Rank</td>
            <td>@row.Name</td>
            <td>@row.BahaiId</td>
            <td>@row.VoteCountPlus</td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>
