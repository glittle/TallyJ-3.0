@using Newtonsoft.Json
@using TallyJ.Code.Enumerations
@using TallyJ.Code
@using TallyJ.Code.Data
@using TallyJ.Code.Session
@using TallyJ.Code.UnityRelated
@using TallyJ.EF
@inherits RazorEngine.Templating.TemplateBase
@{
  var dbContext = UnityInstance.Resolve<IDbContextFactory>().GetNewDbContext;
  var recent = 30.minutes();

  var people = new PersonCacher().AllForThisElection
      .Join(dbContext.OnlineVotingInfo, p => new { p.PersonGuid, p.ElectionGuid },
          ovi => new { ovi.PersonGuid, ovi.ElectionGuid }, (p, ovi) =>
              new { p, ovi })
      .GroupJoin(dbContext.OnlineVoter.Where(ov => ov.VoterIdType == "E"), j => j.p.Email, ov => ov.VoterId, (j, ovList) => new { j.ovi, j.p, byEmail = ovList.FirstOrDefault() })
      .GroupJoin(dbContext.OnlineVoter.Where(ov => ov.VoterIdType == "P"), j => j.p.Phone, ov => ov.VoterId, (j, ovList) => new { j.ovi, j.p, j.byEmail, byPhone = ovList.FirstOrDefault() })
      .Select(j => new
      {
        j.p.C_RowId,
        j.p.C_FullName,
        j.p.VotingMethod,
        j.p.Email,
        j.p.Phone,
        j.ovi,
        j.byEmail,
        j.byPhone
      })
      .ToList()
      .OrderByDescending(j => j.ovi.WhenStatus)
      .ThenBy(j => j.C_FullName)
      .Select(j => new
      {
        PersonId = j.C_RowId,
        j.C_FullName,
        VotingMethod_Display = VotingMethodEnum.TextFor(j.VotingMethod).DefaultTo("-"),
        j.ovi.Status,
        WhenStatus = j.ovi.WhenStatus.AsUtc(),
        j.Email,
        // cannot use merge conditional syntax
        WhenEmail = (j.byEmail != null ? j.byEmail.WhenRegistered : null).AsUtc(),
        j.Phone,
        WhenPhone = (j.byPhone != null ? j.byPhone.WhenRegistered : null).AsUtc()
      });

}
<style>
  tr {
    -moz-page-break-inside: avoid;
    page-break-inside: avoid;
  }

    tr:nth-child(even) {
      background-color: #eee;
    }

  thead {
    display: table-header-group;
    font-weight: bold;
  }

  td {
    padding-left: 2px;
    padding-right: 6px;
    white-space: normal;
  }

  .when {
    font-size: 80%;
    color: #999;
  }

  .recent {
    color: red;
  }

  .notUsed {
    color: #999;
  }
</style>
<div class="body" id="vueBody">
  <div class="reportHead">
    <h1 id="title"></h1>
    <div class="byTitle">
      <div>@UserSession.CurrentElectionName</div>
      <div id="titleDate"></div>
    </div>
  </div>

  <button class="btn btn-mini btnDownloadCsv" data-table=".el-table" type="button" title="Download in CSV format for Excel">Export</button>
  <p class="Comment">
    Shows all voters who have connected to this election in the online voting site.
    Activity in the last @recent.Minutes minutes is <span class="recent">highlighted</span>.
  </p>

  <el-table :data="rows"
            row-key="PersonId"
            style="width: 100%"
            size="mini">

    <el-table-column label="Voter" prop="C_FullName" sortable></el-table-column>

    <el-table-column prop="VotingMethod_Display" sortable>
      <template slot="header" slot-scope="scope">
        Front Desk
        <br />Registration
      </template>
    </el-table-column>

    <el-table-column sortable sort-by="['Status', 'whenStatusSort']'">
      <template slot="header" slot-scope="scope">
        <div>
          Online Ballot
          <div class="when">(When)</div>
        </div>
      </template>
      <template slot-scope="scope">
        {{scope.row.Status}}
        <div v-if="scope.row.whenStatus" :class="['when', scope.row.whenStatusRecent ? 'recent' : '']">
          {{scope.row.whenStatus}}
        </div>
      </template>
    </el-table-column>

    <el-table-column sortable sort-by="Email">
      <template slot="header" slot-scope="scope">
        <div>
          Email
          <div class="when">(Last Login)</div>
        </div>
      </template>
      <template slot-scope="scope">
        {{scope.row.Email}}
        <div v-if="scope.row.whenEmail" :class="['when', scope.row.whenEmailRecent ? 'recent' : '']">
          {{scope.row.whenEmail}}
        </div>
      </template>
    </el-table-column>

    <el-table-column sortable sort-by="Phone">
      <template slot="header" slot-scope="scope">
        <div>
          Phone
          <div class="when">(Last Login)</div>
        </div>
      </template>
      <template slot-scope="scope">
        {{scope.row.Phone}}
        <div v-if="scope.row.whenPhone" :class="['when', scope.row.whenPhoneRecent ? 'recent' : '']">
          {{scope.row.whenPhone}}
        </div>
      </template>
    </el-table-column>

  </el-table>
</div>
<script>
    reportsPage.vueMixin = {
        data: {
            rows: JSON.parse(atob('@JsonConvert.SerializeObject(people).AsBase64()'))
      },
        computed: {
            recent() {
                return moment().subtract(@recent.Minutes, 'm');
            }
        },
        methods: {
          extendRow(row) {

            var whenStatus = row.WhenStatus;
            if(whenStatus) {
                var whenStatusM = moment(whenStatus);
                if (whenStatusM.isAfter(this.recent)) {
                    row.whenStatusRecent = true;
                }
              row.whenStatus = whenStatusM.format(this.timeTemplate);
              row.whenStatusSort = whenStatusM.toISOString();
            }

            var whenEmail = row.WhenEmail;
            if(whenEmail) {
                var whenEmailM = moment(whenEmail);
                if (whenEmailM.isAfter(this.recent)) {
                    row.whenEmailRecent = true;
                }
                row.whenEmail = whenEmailM.format(this.timeTemplate);
                row.whenEmailSort = whenEmailM.toISOString();
            }

            var whenPhone = row.WhenPhone;
            if(whenPhone) {
                var whenPhoneM = moment(whenPhone);
                if (whenPhoneM.isAfter(this.recent)) {
                    row.whenPhoneRecent = true;
                }
                row.whenPhone = whenPhoneM.format(this.timeTemplate);
                row.whenPhoneSort = whenPhoneM.toISOString();
            }


          }
        }
    }
</script>
