@using Microsoft.Practices.ObjectBuilder2
@using TallyJ.Code.Enumerations
@using TallyJ.Code
@using TallyJ.Code.Session
@using TallyJ.EF
@using TallyJ.CoreModels

@{
  var section = ResultHelper.Section.Top;
  var people = new ResultCacher().AllForThisElection
            .Join(new PersonCacher().AllForThisElection, r => r.PersonGuid, p => p.PersonGuid, (r, p) => new { r, p })
            .OrderBy(g => g.r.Rank)
            .ThenBy(g => g.p.FullNameFL)
            .Select(g =>
            {
              var showBreak = g.r.Section != section;
              section = g.r.Section;
              return new
              {
                PersonName = g.p.FullNameFL,
                ShowBreak = showBreak,
                g.r.VoteCount,
                g.r.TieBreakCount,
                g.r.TieBreakRequired,
                g.r.Section
              };
            })
            .ToList();
  var electedClass = "elected";
}
<style>
  .Votes {
    @if (people.Count > 20)
    {
      <text>
        column-width: 15em;
        column-gap: 1em;
        column-rule-width: 4px;
      </text>
    }
    min-height: 200px;
  }

  .person {
    text-indent: -2em;
    margin-left: 2em;
  }

  .elected {
    font-weight: bold;
  }

  .Break {
    border-top: 1px solid #999;
    height: 1px;
  }
</style>
<div class="body WarnIfNotFinalized">
  <button class="btn btn-mini btnDownloadCsv" data-divs=".Selection, .person" data-splitter=" - " type="button" title="Download in CSV format for Excel">Export</button>
  <div class="reportHead">
    <h1 id="title"></h1>
    <div class="byTitle">
      <div>@UserSession.CurrentElectionName</div>
      <div id="titleDate"></div>
    </div>
  </div>
  <p class="Comment">
    "If the assembled friends choose to have a full Tellers’ Report including the names
    of all who are voted for and the number of votes received, this is acceptable." (Spoiled votes and names on spoiled ballots are not included.)
  </p>
  <p class="Comment Selection">
    Showing those elected and those with <select id="limitNum"></select> or more votes cast for them (<span id="numShown"></span> people).
  </p>
  <div class="Votes">
    @foreach (var person in people)
    {
      if (person.ShowBreak)
      {
        <div class="Break"></div>
        electedClass = "";
      }
      <div class="person @electedClass" data-num="@person.VoteCount">
        <span class="small1">@person.VoteCount @(person.TieBreakRequired.AsBoolean() ? " / " + person.TieBreakCount : "") - </span>
        <span class="name">@person.PersonName</span>
      </div>
    }
  </div>
</div>
<script>
  var list = [@String.Join(",", people.Where(p => p.Section!= ResultHelper.Section.Top).Select(p => p.VoteCount).Distinct().OrderByDescending(n => n).ToArray())];
  $('#limitNum')
    .html('<option>{0}</option>'.filledWithEach(list))
    .val(localStorage.getItem('votesByNumLimit'))
    .change(updateList);

  function updateList() {
    var limit = +$('#limitNum').val() || 1;
    localStorage.setItem('votesByNumLimit', limit);
    $('.person').each(function (i, el) {
      var p = $(el);
      var num = +p.data('num');
      p.toggle(num >= limit);
    });
    showCount();
  }

  function showCount() {
    $('#numShown').text($('.person:visible').length);
  }

  setTimeout(function() {
    updateList();
  }, 0);
</script>